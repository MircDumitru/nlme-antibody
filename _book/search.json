[
  {
    "objectID": "ebola.html",
    "href": "ebola.html",
    "title": "1  NLME models for antibody concentration decay",
    "section": "",
    "text": "1.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#introduction",
    "href": "ebola.html#introduction",
    "title": "1  NLME models for antibody concentration decay",
    "section": "",
    "text": "1.1.1 Prerequisites\n\nlibrary(tidyverse)  # tidyverse \nlibrary(nlme)       # non-linear mixed effect models\nlibrary(saemix)     # nlme package for saemix objects;",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#exploratory-data-analysis",
    "href": "ebola.html#exploratory-data-analysis",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.2 Exploratory data analysis",
    "text": "1.2 Exploratory data analysis\nReading the csv file and look at its head:\n\nCode# read the csv file\ntb &lt;- read_csv(\"data/data_ebola_ab.csv\")\ntb |&gt;\n  head() |&gt;\n  knitr::kable(align = \"ccccccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\nID\ntime\nsex\nage\nbmi\ncountry\nAbelisa\n\n\n\nID1\n0\nFemale\n35.49993\n20.69408\nWest Africa\n1.785124\n\n\nID1\n7\nFemale\n35.49993\n20.69408\nWest Africa\n4.434470\n\n\nID1\n15\nFemale\n35.49993\n20.69408\nWest Africa\n4.124822\n\n\nID1\n30\nFemale\n35.49993\n20.69408\nWest Africa\n4.050954\n\n\nID1\n90\nFemale\n35.49993\n20.69408\nWest Africa\n3.382073\n\n\nID1\n180\nFemale\n35.49993\n20.69408\nWest Africa\n2.935390\n\n\n\n\n\nCheck the data types (and transform “character” into “factors” if any) and check for missing values.\nTable 1.1 shows the corresponding data types for the variables in the data set. Three variables (ID, sex, country) are categorical variables and will be re-coded as factors.\n\nCode# checking the var types\ntb |&gt;\n  summarise(across(everything(), typeof)) |&gt;\n  knitr::kable(align = \"ccccccc\")\n\n\nTable 1.1: The variable types in the data set\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\ntime\nsex\nage\nbmi\ncountry\nAbelisa\n\n\ncharacter\ndouble\ncharacter\ndouble\ndouble\ncharacter\ndouble\n\n\n\n\n\n\n\nTable 1.2 shows the number of missing values for each variable in the data set. There are no missing values.\n\nCode# checking for possible missing vals\ntb |&gt;\n  summarise(across(everything(), \\(x) sum(is.na(x)))) |&gt;\n  knitr::kable(align = \"ccccccc\")\n\n\nTable 1.2: The number of missing values in each variable\n\n\n\n\nID\ntime\nsex\nage\nbmi\ncountry\nAbelisa\n\n\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nTwo pre-processing operations should be done:\n\ncleaning the names (not essential but for consistency we adhere to the tidy design principles),\ntransforming the “character” variables into “factors” (when important, the ordering of factors should be accounted for; here the sex and country variables are not ordered factors; the ID variable might be ordered for visualizations reasons if necessary).\n\nThe following chunk is doing the pre-processing as mentioned above and checks the correctness of the pre-processing.\n\nCodetb &lt;- tb |&gt;\n  # clean the names\n  janitor::clean_names() |&gt;\n  # transform chr into factors\n  mutate(across(where(is.character), fct))\n\n# check the transformed tibble\ntb |&gt;\n  glimpse()\n#&gt; Rows: 360\n#&gt; Columns: 7\n#&gt; $ id      &lt;fct&gt; ID1, ID1, ID1, ID1, ID1, ID1, ID1, ID1, ID2, ID2, ID2, ID2, ID…\n#&gt; $ time    &lt;dbl&gt; 0, 7, 15, 30, 90, 180, 365, 730, 0, 7, 15, 30, 90, 180, 365, 7…\n#&gt; $ sex     &lt;fct&gt; Female, Female, Female, Female, Female, Female, Female, Female…\n#&gt; $ age     &lt;dbl&gt; 35.49993, 35.49993, 35.49993, 35.49993, 35.49993, 35.49993, 35…\n#&gt; $ bmi     &lt;dbl&gt; 20.69408, 20.69408, 20.69408, 20.69408, 20.69408, 20.69408, 20…\n#&gt; $ country &lt;fct&gt; West Africa, West Africa, West Africa, West Africa, West Afric…\n#&gt; $ abelisa &lt;dbl&gt; 1.785124, 4.434471, 4.124822, 4.050954, 3.382073, 2.935390, 2.…\n\n\nThe tibbles now has factor variables & tidy names. The next chunk is looking at the number of unique values in factor variables (i.e. the support of the categorical variables). Table 1.3 shows the number of unique values in factor variables.\n\nCode# tb |&gt;\n#   summarise(across(where(is.factor), \\(x) length(unique(x))))\n\ntb |&gt;\n  summarise(across(where(is.factor), n_distinct)) |&gt;\n  knitr::kable(align = \"ccc\")\n\n\nTable 1.3: The corresponding number of levels for the factor variables\n\n\n\n\nid\nsex\ncountry\n\n\n45\n2\n3\n\n\n\n\n\n\n\nFor the factor variables in the tibble:\n\n45 levels for id factor variable.\n2 levels for sex factor variable.\n3 levels for country factor variable.\n\nThe next subsections are looking at the factor variables. The goal is to have an idea about possible inbalances between levels and to have some visual inspection of their distributions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#the-factor-variables",
    "href": "ebola.html#the-factor-variables",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.3 The factor variables",
    "text": "1.3 The factor variables\n\n1.3.1 The id variable\nThe following chunk is computing the counts and proportions of the id’s variable levels.\n\nCodetb_id_levels_number &lt;- tb |&gt;\n  summarise(\n    n = n(),\n    .by = id\n  ) |&gt;\n  mutate(\n    prop = n / sum(n),\n  )\n\n\nTable 1.4 shows the head of the summarized data, showing the corresponding counts (representing the number of measurements/observations) for each level in the id variable and Figure 1.1 shows a visualisation of the id variable level’s counts.\n\nCodetb_id_levels_number |&gt;\n  head() |&gt;\n  knitr::kable(align = \"ccc\")\n\n\nTable 1.4: The number of observations for each level corresponding to id variable\n\n\n\n\nid\nn\nprop\n\n\n\nID1\n8\n0.0222222\n\n\nID2\n8\n0.0222222\n\n\nID3\n8\n0.0222222\n\n\nID4\n8\n0.0222222\n\n\nID5\n8\n0.0222222\n\n\nID6\n8\n0.0222222\n\n\n\n\n\n\n\n\n\nCodetb_id_levels_number |&gt;\n  ggplot(aes(x = id, y = n)) +\n  geom_point(size = 3, color = \"tomato\") +\n  geom_segment(aes(x = id, xend = id, y = 0, yend = n), color = \"tomato\") +\n  labs(\n    title = \"Number of observations of the ID levels\",\n    subtitle = \"Each subject appears with 8 measurements in the data\",\n    x = \"Subject's ID\",\n    y = \"Number of observations\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.1: The number of observations for each level corresponding to id variable\n\n\n\n\nIt seems that each id level has the same number of counts for each level, i.e. it seems that there are preciselsy 8 observations for every subject in the data set. This can be checked by looking at the complete tibble given its small size but in general it can be checked by computing the number of distinct values in counts variable (n) in the summarized data. The following codes does exactly this:\n\nCodetb_id_levels_number |&gt;\n  select(n) |&gt;\n  n_distinct() == TRUE\n#&gt; [1] TRUE\n\n\nThere is only one numerical value (8 in this case) corresponding to the ID counts for each level. Hence, it can be concluded that\n\n\n\n\n\n\nThe number of observations (measurements) is the same across the subjects (8 observations), i.e. there are no missing or additional measurements for any subject in the data set.\n\n\n\n\nCoden_obs_per_subject &lt;- tb_id_levels_number |&gt;\n  pull(n) |&gt;\n  unique()\n# n_obs_per_subject\n\n\n\n1.3.2 The sex variable\nThe following chunk is looking at the counts and proportion of the sex’s variable levels.\n\nCodetb_sex_levels_number &lt;- tb |&gt;\n  summarise(\n    n_obs = n(),\n    .by = sex\n  ) |&gt;\n  mutate(\n    n_subjects = n_obs / n_obs_per_subject,\n    prop = n_subjects / sum(n_subjects),\n  )\n\n\nTable 1.5 shows the number of subjects for each sex’s variable level and their corresponding proportion in the data set. Figure 1.2 shows a bar plot visualisation of the proportions.\n\nCodetb_sex_levels_number |&gt;\n  knitr::kable(align = \"cccc\")\n\n\nTable 1.5: The number of subjects for each sex level and their corresponding proportion in the data set.\n\n\n\n\nsex\nn_obs\nn_subjects\nprop\n\n\n\nFemale\n168\n21\n0.4666667\n\n\nMale\n192\n24\n0.5333333\n\n\n\n\n\n\n\n\n\nCodetb |&gt;\n  ggplot(aes(x = sex, y = after_stat(prop), group = 1)) +\n  geom_bar(fill = \"tomato\") +\n  labs(\n    title = \"Proportion of the sex levels in the data\",\n    x = \"Subject's sex\",\n    y = \"Proportion\"\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.2: The proportion of the sex levels in the data.\n\n\n\n\nThe counts and proportions for the levels corresponding to the sex variable are:\n\n“Female” level: 21 subjects, representing 0.47% of the data,\n“Male” level: 24 subjects, representing 0.53% of the data.\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe data is fairly balanced between the sex’s variable levels.\n\n\n\n\n1.3.3 The country variable\nThe following chunk is looking at the counts and proportion of the country’s variable levels:\n\nCodetb_country_levels_number &lt;- tb |&gt;\n  summarise(\n    n_obs = n(),\n    .by = country\n  ) |&gt;\n  mutate(\n    n_subjects = n_obs / n_obs_per_subject,\n    prop = n_subjects / sum(n_subjects),\n  )\n\n\nTable 1.6 shows the number of subjects for each country’s variable levels and their corresponding proportion in the data set. Figure 1.3 shows a bar plot visualisation of the proportions.\n\nCodetb_country_levels_number |&gt;\n  knitr::kable(align = \"ccc\")\n\n\nTable 1.6: The number of subjects for each country level and their corresponding proportion in the data set.\n\n\n\n\ncountry\nn_obs\nn_subjects\nprop\n\n\n\nWest Africa\n120\n15\n0.3333333\n\n\nEast Africa\n96\n12\n0.2666667\n\n\nEurope\n144\n18\n0.4000000\n\n\n\n\n\n\n\n\n\nCodetb |&gt;\n  ggplot(aes(x = country,  y = after_stat(prop), group = 1)) +\n  geom_bar(fill = \"tomato\") +\n  labs(\n    title = \"Proportion of the country levels in the data\",\n    x = \"Subjects's country\",\n    y = \"Proportion\"\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.3: The proportion of the country levels in the data.\n\n\n\n\nThe counts and proportions for the levels corresponding to the country variable are:\n\n“West Africa” level: 15 observations, representing 0.33% of the data,\n“East Africa” level: 12 observations, representing 0.27% of the data,\n“Europe” level: 18 observations, representing 0.4% of the data.\n\n\n\n\n\n\n\nThe data is fairly balanced between the country levels.\n\n\n\nThe following chunk is looking at the proportion of the sex’s variable levels in each country’s variable levels.\nTable 1.7 shows the results & Figure 1.4 a bar plot visualisation.\n\nCodetb |&gt;\n  summarise(\n    n_subjects = n() / n_obs_per_subject,\n    .by = c(country, sex)\n  ) |&gt;\n  arrange(country, sex) |&gt;\n  group_by(country) |&gt;\n  mutate(prop_across_regions = n_subjects / sum(n_subjects)) |&gt;\n  ungroup() |&gt;\n  mutate(prop = n_subjects / sum(n_subjects)) |&gt;\n  knitr::kable(align = \"cccccc\")\n\n\nTable 1.7: The number of subjects for each sex - country pair corresponding levels and their corresponding proportion in the data set.\n\n\n\n\ncountry\nsex\nn_subjects\nprop_across_regions\nprop\n\n\n\nWest Africa\nFemale\n9\n0.6000000\n0.2000000\n\n\nWest Africa\nMale\n6\n0.4000000\n0.1333333\n\n\nEast Africa\nFemale\n5\n0.4166667\n0.1111111\n\n\nEast Africa\nMale\n7\n0.5833333\n0.1555556\n\n\nEurope\nFemale\n7\n0.3888889\n0.1555556\n\n\nEurope\nMale\n11\n0.6111111\n0.2444444\n\n\n\n\n\n\n\n\n\nCodetb |&gt;\n  ggplot(aes(x = country, fill = sex)) +\n  geom_bar(position = \"fill\") +\n  labs(\n    title = \"Proportion of sex for each region\",\n    x = \"Patient's country\",\n    y = \"Counts\", \n    fill = NULL\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n  ) \n\n\n\n\n\n\nFigure 1.4: The proportion of the sex’s levels in country’s levels",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#the-numerical-variables",
    "href": "ebola.html#the-numerical-variables",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.4 The numerical variables",
    "text": "1.4 The numerical variables\n\n1.4.1 The time variable\nThe id variable analysis showed that for each subject (i.e. for each level of the id variable) exactly 8 measurements – taken at different times – are available. For the time variable, we check if the corresponding measurement times for each subject are the same (i.e. if for each subject in the data set the 8 measurements are taken at the same time instances). Because of the small size of the data set, we can get and idea if this is true by looking at the plot of measurement times for each ID, Figure 1.5. (Plot done using log(times) for a better visualization).\n\nCodetb |&gt;\n  ggplot(aes(x = id, y = log(time))) +\n  geom_point(color = \"tomato\") +\n  labs(\n    title = \"Measurment times\",\n    x = \"Patient's ID\",\n    y = \"Log Time (days)\", \n  ) +\n  scale_y_continuous(breaks = seq(-2, 7, by = 2)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.5: The times of measurements for each subject in the data set.\n\n\n\n\nThis can be checked rigorously via pivot_wider, pivoting the measurement times wider and checking if the value is unique in each time column. The next chunk is doing this.\n\nCodetb |&gt;\n  select(id, time) |&gt;\n  # pivot the tibble wider and get the time measurements \n  pivot_wider(\n    names_from = time,\n    names_prefix = \"t_\",\n    values_from = time\n    ) |&gt;\n  summarise(\n    across(starts_with(\"t_\"), n_distinct)\n  ) |&gt;\n  knitr::kable(align = \"ccccccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\nt_0\nt_7\nt_15\nt_30\nt_90\nt_180\nt_365\nt_730\n\n\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe corresponding measurement times for each subject are taken the same time instances.\n\n\n\nFor all subjects in the data set, the measurements are taken at 0, 7, 15, 30, 90, 180, 365, 730 days.\n\n1.4.2 The age variable\nThe following chunk is computing the density of age variable, showed in Figure 1.6.\n\nCodetb |&gt;\n  ggplot(aes(x = age)) +\n  geom_density(color = \"tomato\", fill = \"tomato\", alpha = .5) +\n  labs(\n    title = \"Age density\",\n    x = \"Age (years)\",\n    y = \"Density\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.6: The density of age variable.\n\n\n\n\nThe age variable seems to contain negative values. The following chunk filters the tibble for negative age values, showed in Table 1.8\n\nCodetb_negative_age &lt;- tb |&gt;\n  filter(age &lt; 0) |&gt;\n  distinct(id, age)\n\ntb_negative_age |&gt;\n  knitr::kable(align = \"cc\")\n\n\nTable 1.8: The subjects correponding ID’s values for negative age values\n\n\n\n\nid\nage\n\n\n\nID27\n-3.191009\n\n\nID33\n-12.318307\n\n\n\n\n\n\n\n\nThere are two subjects with corresponding negative ages:\n\nsubject ID27 which has the recorded corresponding age -3.19,\nsubject ID33 which has the recorded corresponding age -12.32.\n\n\n\n\n\n\n\nThe subjects appearing with negative age in the data are dropped.\n\n\n\nThe following chunks drops the subjects with corresponds negative age.\n\nCodetb_clean &lt;- tb |&gt;\n  filter(age &gt;= 0)\n\n\nThe conditional distributions of the age variable given the sex variable’s levels are fairly close to each other, Figure 1.7. This is not the case for the conditional distributions of the age variable given the country variable’s levels: the age distribution for subjects from “West Africa” is significant different from the age distribution for subjects from “East Africa” and “Europe”. (This is not very significant though, accounting for the small number of subjects, Table 1.6.)\nCodetb_clean |&gt;\n  ggplot(aes(x = age, color = sex, fill = sex)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Age densities for sex levels\",\n    x = \"Age (year)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  ) \n\n\ntb_clean |&gt;\n  ggplot(aes(x = age, color = country, fill = country)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Age densities for region levels\",\n    x = \"Age (years)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  ) \n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.7: The conditional distribution of age given sex and country variables.\n\n\nIn this case, looking at the median, IQR and range is more sensible. Table 1.9 and Table 1.10 are showing the min, median, IQR and max for the age variable conditional on sex and country levels, respectively. The corresponding boxplots are showed in Figure 1.8.\n\nCode\ntb_clean |&gt;\n  summarise(\n    min = min(age),\n    median = median(age),\n    IQR = IQR(age), \n    max = max(age),\n    .by = sex\n  ) |&gt;\n  knitr::kable(align = \"ccccc\")\n\n\nTable 1.9: The min, median, IQR and max for the age variable conditional on sex variable’s levels.\n\n\n\n\nsex\nmin\nmedian\nIQR\nmax\n\n\n\nFemale\n16.95602\n47.08783\n23.23231\n79.14763\n\n\nMale\n2.96366\n44.15401\n30.09295\n80.64180\n\n\n\n\n\n\n\n\n\nCodetb_clean |&gt;\n  summarise(\n    min = min(age),    \n    median = median(age),\n    IQR = IQR(age), \n    max = max(age),\n    .by = country\n  )  |&gt;\n  knitr::kable(align = \"ccccc\")\n\n\nTable 1.10: The min, median, IQR and max for the age variable conditional on country variable’s levels.\n\n\n\n\ncountry\nmin\nmedian\nIQR\nmax\n\n\n\nWest Africa\n24.11422\n39.29298\n21.17336\n80.64180\n\n\nEast Africa\n2.96366\n50.63353\n37.34947\n68.56830\n\n\nEurope\n16.95602\n48.08937\n32.51637\n79.14763\n\n\n\n\n\n\n\n\nCodetb_clean |&gt;\n  ggplot(aes(y = age, x = sex, fill = sex)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Age for sex levels\",\n    x = \"Sex\",\n    y = \"Age (years)\"\n  )  +\n  theme_bw()\n\ntb_clean |&gt;\n  ggplot(aes(y = age, x = country, fill = country)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Age for region levels\",\n    x = \"Region\",\n    y = \"Age (years)\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.8: The boxplot of age variable given sex and country variables.\n\n\nAnother thing that should be checked about age variable is the following: it seems the variable rather indicates the subject’s age at the beginning of the experiment and it does not increment during the experiment, i.e. it does not account for the time passed between measurements. This can be checked by looking at the distinct values of id and age in the data set:\n\nCodetb_clean |&gt;\n  nrow() / n_obs_per_subject == tb_clean |&gt;\n  distinct(id, age) |&gt;\n  nrow()\n#&gt; [1] TRUE\n\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe age variable represents the subject’s age at the beginning of the experiment and it is not accounting for the time between measurements.\n\n\n\nAnother variable age_updated that represents the subject’s age at the time of each measurement is added to the tibble in case the analysis requires to take in account the age at the corresponding time instance of the measurement. The next chunk does this.\n\nCodetb_clean &lt;- tb_clean |&gt;\n  mutate(age_updated = age + time / 365) |&gt;\n  relocate(age_updated, .after = age)\n\ntb_clean |&gt;\n  head() |&gt;\n  knitr::kable(align = \"cccccccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ntime\nsex\nage\nage_updated\nbmi\ncountry\nabelisa\n\n\n\nID1\n0\nFemale\n35.49993\n35.49993\n20.69408\nWest Africa\n1.785124\n\n\nID1\n7\nFemale\n35.49993\n35.51911\n20.69408\nWest Africa\n4.434470\n\n\nID1\n15\nFemale\n35.49993\n35.54103\n20.69408\nWest Africa\n4.124822\n\n\nID1\n30\nFemale\n35.49993\n35.58213\n20.69408\nWest Africa\n4.050954\n\n\nID1\n90\nFemale\n35.49993\n35.74651\n20.69408\nWest Africa\n3.382073\n\n\nID1\n180\nFemale\n35.49993\n35.99308\n20.69408\nWest Africa\n2.935390\n\n\n\n\n\n\n1.4.3 The bmi variable\nAcounting for the fact that the age variable does not represent the age at the time of each measurement but rather the subject’s age at the beginning of the experiment, we start by checking if the bmi variable has the same interpretation, i.e. if it simply indicates the subject’s body mass index at the start of the experiment and it does not capture the subject’s BMI variation during the experiment:\n\nCodetb_clean |&gt;\n  nrow() / n_obs_per_subject == tb_clean |&gt;\n  distinct(id, bmi) |&gt;\n  nrow()\n#&gt; [1] TRUE\n\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe bmi variable represents the subject’s BMI at the beginning of the experiment and it is not accounting for the BMI variations during the experiment.\n\n\n\nAs before, we look at the density of bmi variable. The next chunk computes the denisty, showed in Figure 1.9.\n\nCodetb_clean |&gt;\n  ggplot(aes(x = bmi)) +\n  geom_density(color = \"tomato\", fill = \"tomato\", alpha = .5) +\n  labs(\n    title = \"BMI density\",\n    x = \"BMI (kg/m²)\",\n    y = \"Density\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.9: The density of bmi variable.\n\n\n\n\nThe conditional densities and conditional boxplots (conditional on the categorical variables sex and country) are showed in Figure 1.10 and Figure 1.11.\nCode\n\ntb_clean |&gt;\n  ggplot(aes(x = bmi, color = sex, fill = sex)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"BMI densities for sex levels\",\n    x = \"BMI (kg/m²)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  ) \n\ntb_clean |&gt;\n  ggplot(aes(x = bmi, color = country, fill = country)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"BMI densities for region levels\",\n    x = \"BMI (kg/m²)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.10: The densities of bmi variable given sex and country variables.\n\n\nCodetb_clean |&gt;\n  ggplot(aes(y = bmi, x = sex, fill = sex)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"BMI for sex levels\",\n    x = \"Sex\",\n    y = \"BMI (kg/m²)\"\n  )  +\n  theme_bw()\n\ntb_clean |&gt;\n  ggplot(aes(y = bmi, x = country, fill = country)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"BMI for region levels\",\n    x = \"Region\",\n    y = \"BMI (kg/m²)\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.11: The boxplots of bmi variable given sex and country variables.\n\n\n\n1.4.4 The abelisa variable\nAs before, we look at the density of abelisa variable. The next chunk computes the denisty, showed in Figure 1.12,\n\nCodetb_clean |&gt;\n  ggplot(aes(x = abelisa)) +\n  geom_density(color = \"tomato\", fill = \"tomato\", alpha = .5) +\n  labs(\n    title = \"Antibody concentration density\",\n    x = \"Antibody concentration (EU/mL)\",\n    y = \"Density\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.12: The density of abelisa variable.\n\n\n\n\nthe conditional densities are showed in Figure 1.13\nCodetb_clean |&gt;\n  ggplot(aes(x = abelisa, color = sex, fill = sex)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Antibody conc. densities for sex levels\",\n    x = \"Antibody conc. (EU/mL)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\ntb_clean |&gt;\n  ggplot(aes(x = abelisa, color = country, fill = country)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Antibody conc. densities for region levels\",\n    x = \"Antibody conc. (EU/mL)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.13: The density of abelisa variable given sex and country variables.\n\n\nand the conditional boxplots are showed in Figure 1.14\nCodetb_clean |&gt;\n  ggplot(aes(y = abelisa, x = sex, fill = sex)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Antibody concentration for sex levels\",\n    x = \"Sex\",\n    y = \"Antibody conc. (EU/mL)\"\n  )  +\n  theme_bw()\n\ntb_clean |&gt;\n  ggplot(aes(y = abelisa, x = country, fill = country)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Antibody concentration for region levels\",\n    x = \"Region\",\n    y = \"Antibody conc. (EU/mL)\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.14: The boxplot of abelisa variable given sex and country variables.\n\n\nThe next chunk computes the antibody concentration during time for all subjects in the data frame and it’s log version, showed in Figure 1.15.\nCodetb_clean |&gt;\n  ggplot(aes(x = time, y = abelisa, color = bmi, group = id)) +\n  geom_line() +\n  scale_color_distiller(palette = \"RdPu\") +\n  labs(\n    title = \"Antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\ntb_clean |&gt;\n  ggplot(aes(x = time, y = log(abelisa), color = bmi, group = id)) +\n  geom_line() +\n  scale_color_distiller(palette = \"RdPu\") +\n  labs(\n    title = \"Antibody concentration during time\",\n    x = \"log(Time) (days)\",\n    y = \"log(Antibody conc.) (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.15: The antibody concentration during time for all subjects.\n\n\nThe next chunk computes the average antibody concentration during time (based on the subjects in the data frame) and it’s log version, showed in Figure 1.16.\nCodetb_clean |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  ggplot(aes(x = time, y = mean_abelisa)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    title = \"Average antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\ntb_clean |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  ggplot(aes(x = time, y = log(mean_abelisa))) +\n  geom_line(color = \"tomato\") +\n  labs(\n    title = \"Average antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.16: The average antibody concentration during time.\n\n\nThe next chunk computes the antibody concentration during time for all subjects, for all levels of country and sex variables, showed in Figure 1.17.\n\nCodetb_clean |&gt;\n  ggplot(aes(x = time, y = abelisa, color = bmi, group = id)) +\n  geom_line() +\n  facet_grid(sex ~ country) +\n  scale_color_distiller(palette = \"RdPu\") +\n  labs(\n    title = \"Antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\nFigure 1.17: The antibody concentration during time for all subjects, for all levels of country and sex variables\n\n\n\n\nThe next chunk computes the antibody concentration during time for all subjects, individually, showed in Figure 1.18 (for clarity, title and axis names are removed).\n\nCodetb_clean |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_line(color = \"tomato\") +\n  facet_wrap(~ id) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.18: The antibody concentration during time for all subjects, for all levels of country and sex variables\n\n\n\n\nThe two aspects that are apparent in Figure 1.15, Figure 1.17 and fig-abelisa-all-per-subject are the following:\n\nA similar behavior (pattern) of the concentration levels during time (i.e. a very sudden increase followed by a slow decrease).\nVariation in behavior between subjects: the amplitude of the initial spike varies, the rate of decrease varies. This variation is (partially) explained by the subject particular physiology.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#non-linear-model-with-mixed-effects.",
    "href": "ebola.html#non-linear-model-with-mixed-effects.",
    "title": "1  Ebola",
    "section": "\n1.5 Non-linear model with mixed effects.",
    "text": "1.5 Non-linear model with mixed effects.\nIn the following,\n\n\nm denotes the number of subjects,\n\nn denotes the number of measurements (in this case the concentration measurements) for each subject taken at different time instants.\n\nThe measurement corresponding to ith patient at the jth time instant is denoted by y_{ij}, with\n\n\ni = 1, \\ldots, m, (in this case m = 43, accounting for the removed data with corresponding negative ages)\n\nj = 1, \\ldots, n (in this case n = 8).\n\ny_{ij} is viewed as the dependent variable (in this case the abelisa variable representing the antibody concentration) of a non-linear model, writing\n\n\\begin{equation}\n\\begin{split}\ny_{ij}\n=\nf(t_j, \\bm{\\psi})\n+\n\\epsilon_{ij}\n,\n\\end{split}\n\\end{equation}\n\\tag{1.1}\nwhere\n\n\nf represents a non-linear model,\n\nt_j represents the jth time instant,\n\n\\bm{\\psi} represents the parameters vector,\n\n\\epsilon_{ij} accounts for the modeling error and uncertainty.\n\n\n1.5.1 One subject\nBefore considering the model Equation 1.1 accounting for all subjects, a single subject is considered. For ilustration, Figure 1.19 shows the evolution of the antibody concentration during time for subject ID1.\n\nCodetb_clean |&gt;\n  filter(id == \"ID1\") |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(color = \"tomato\") +\n  labs(\n    title = \"Antibody concentration during time for subject ID1\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) \n\n\n\n\n\n\nFigure 1.19: The antibody concentration during time for one subject (ID1)\n\n\n\n\nIn this case, the models writes\n\n\\begin{equation}\n\\begin{split}\ny_{j} = f(t_j, \\psi) + \\epsilon_j,\n\\end{split}\n\\end{equation}\n\\tag{1.2}\ni.e. the patient index i is dropped and the only measurement variation is due to the measurement timing.\nThe following function is considered (compartment model with first order absorption and linear elimination):\n\n\\begin{equation}\n\\begin{split}\nf(t_j, \\psi)\n=\n\\frac{k_a}{k_a - k_e}\n\\left(\n\\exp{\\left( -k_e t_j \\right)}\n-\n\\exp{\\left( -k_a t_j \\right)}\n\\right)\n\\end{split}\n\\end{equation}\n\\tag{1.3}\nwith\n\n\\begin{equation}\n\\begin{split}\n\\psi\n=\n\\left(k_a, k_e, v \\right).\n\\end{split}\n\\end{equation}\n\\tag{1.4}\n\n# compartment model\ncompartment_model &lt;- function(psi, t){\n  k_a &lt;- psi[1] \n  k_e &lt;- psi[2]\n  v  &lt;- psi[3]\n  return (k_a / (v * (k_a - k_e)) * (exp(-k_e * t) - exp(-k_a * t)))\n}\n\n\n# Parameters \npsi = c(10, 0.01, 50)\n# Generate time \nt &lt;- seq(0, 730, by = 1)\n\ncompartment_data &lt;- compartment_model(psi, t)\ntb_compartment &lt;- tibble(\n  t = t,\n  f = compartment_data\n)\ntb_compartment |&gt;\n  ggplot(aes(x = t, y = f)) +\n  geom_line()\n\n\n\n\n\n\n\nThe least-squares estimator is given by\n\n\\begin{equation}\n\\begin{split}\n\\widehat{\\psi}\n=\n\\arg\\min_{\\psi}\n\\sum_{j=1}^{n}\n\\left(\ny_j\n-\nf(t_j, \\psi)\n\\right)\n\\end{split}\n\\end{equation}\n\\tag{1.5}\n\n# nls_one_sib &lt;- nls(\n#   abelisa ~ compartment_model(psi, time),\n#   data = tb_clean,\n#   start = list(psi=c(k_a = 1, k_e = 0.1, v = 20))\n#   )\n# nls_one_sib\n\n\n# Parameters for Exponential Decay\n# A_exp &lt;- 100000  # Initial concentration\n# k_exp &lt;- 0.002 # Decay rate\n\n\n# Generate time points\n# time &lt;- seq(0, 730, by = 1)\n# concentration_exp &lt;- exp_decay(time, A_exp, k_exp)\n\n\n# Plot Exponential Decay\n# plot(time, concentration_exp, type = \"l\", col = \"blue\", lwd = 2, \n     # xlab = \"Time (Days)\", ylab = \"Antibody Concentration\", \n     # main = \"Exponential Decay Model\")\n# grid()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Ebola</span>"
    ]
  },
  {
    "objectID": "ebola.html#non-linear-model",
    "href": "ebola.html#non-linear-model",
    "title": "1  Ebola",
    "section": "\n1.6 Non-linear model",
    "text": "1.6 Non-linear model\nIn the following,\n\n\nm denotes the number of subjects,\n\nn denotes the number of measurements (in this case the concentration measurements) for each subject taken at different time instants.\n\nThe measurement corresponding to ith patient at the jth time instant is denoted by y_{ij}, with\n\n\ni = 1, \\ldots, m, (in this case m = 43, accounting for the removed data with corresponding negative ages)\n\nj = 1, \\ldots, n (in this case n = 8).\n\ny_{ij} is viewed as the dependent variable (in this case the abelisa variable representing the antibody concentration) of a non-linear model, writing\n\n\\begin{equation}\n\\begin{split}\ny_{ij}\n=\nf(t_j, \\bm{\\psi})\n+\n\\epsilon_{ij}\n,\n\\end{split}\n\\end{equation}\n\\tag{1.2}\nwhere\n\n\nf represents a non-linear model,\n\nt_j represents the jth time instant,\n\n\\bm{\\psi} represents the parameters vector,\n\n\\epsilon_{ij} accounts for the modeling error and uncertainty.\n\n\n1.6.1 One subject\nBefore considering the model Equation 1.2 accounting for all subjects, a single subject is considered. For illustration, Figure 1.20 shows the evolution of the antibody concentration during time for subject ID1.\n\nCodetb_after_7 |&gt;\n  filter(id == \"ID1\") |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") + \n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration during time for subject ID1\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.20: The antibody concentration during time for subject ID1\n\n\n\n\nIn this case, the model writes\n\n\\begin{equation}\n\\begin{split}\ny_{j} = f(t_j, \\bm{\\psi}) + \\epsilon_j,\n\\end{split}\n\\end{equation}\n\\tag{1.3}\ni.e. the subject’s index i is dropped and the only measurement variation is due to the measurement timing, with the least-squares estimate given by\n\n\\begin{equation}\n\\begin{split}\n\\widehat{\\bm{\\psi}}\n=\n\\arg\\min_{\\bm{\\psi}}\n\\sum_{j=1}^{n}\n\\left(\ny_j\n-\nf(t_j, \\bm{\\psi})\n\\right)^2\n\\end{split}\n\\end{equation}\n\\tag{1.4}\nThe following function is considered (compartment model with first order absorption and linear elimination):\n\n\\begin{equation}\n\\begin{split}\nf(t_j, \\psi)\n=\n\\frac{k_a}{k_a - k_e}\n\\left(\n\\exp{\\left( -k_e t_j \\right)}\n-\n\\exp{\\left( -k_a t_j \\right)}\n\\right)\n\\end{split}\n\\end{equation}\n\\tag{1.5}\nwith\n\n\\begin{equation}\n\\begin{split}\n\\psi\n=\n\\left(k_a, k_e, v \\right).\n\\end{split}\n\\end{equation}\n\\tag{1.6}\n\nCodenls_sub_1 &lt;- nls(\n  abelisa ~ f_approx(psi, time),\n  data = tb_after_7 |&gt; filter(id == \"ID1\"),\n  start = list(psi = psi_vals)\n  )\n\nnls_sub_1\n#&gt; Nonlinear regression model\n#&gt;   model: abelisa ~ f_approx(psi, time)\n#&gt;    data: filter(tb_after_7, id == \"ID1\")\n#&gt;     psi1     psi2     psi3 \n#&gt; 2.369908 4.441104 0.007356 \n#&gt;  residual sum-of-squares: 0.03733\n#&gt; \n#&gt; Number of iterations to convergence: 6 \n#&gt; Achieved convergence tolerance: 6.02e-06\n\nbroom::tidy(nls_sub_1) |&gt;\n  knitr::kable(align = \"ccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\npsi1\n2.3699077\n0.0878109\n26.988771\n0.0000112\n\n\npsi2\n4.4411042\n0.0762377\n58.253396\n0.0000005\n\n\npsi3\n0.0073556\n0.0010835\n6.788539\n0.0024586\n\n\n\n\n\n\nCodetb_sub_1_pred &lt;- tb_f_approx |&gt;\n  mutate(\n  prediction = predict(nls_sub_1, newdata = tb_f_approx)  \n  )\ntb_sub_1_pred\n#&gt; # A tibble: 724 × 3\n#&gt;    time     f prediction\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1     7  4.04       4.34\n#&gt; 2     8  4.03       4.32\n#&gt; 3     9  4.02       4.31\n#&gt; 4    10  4.01       4.29\n#&gt; 5    11  4.00       4.28\n#&gt; 6    12  4.00       4.27\n#&gt; # ℹ 718 more rows\n\n\n\nCodetb_after_7 |&gt;\n  filter(id == \"ID1\") |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_sub_1_pred\n    ) +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_1_pred\n    ) +\n  labs(\n    title = \"Antibody concentration vs. NLM pred\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.21: The antibody concentration during time for subject ID1 vs. approximation function (green) vs. NLM prediction (blue)\n\n\n\n\n\n1.6.2 Multiple subjects\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration during time for all subjects\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.22: The antibody concentration during time for all subjects vs. approximation function\n\n\n\n\nThe model for multiple subjects is given by Equation 1.2 and the LS estimate is given by\n\n\\begin{equation}\n\\begin{split}\n\\widehat{\\bm{\\psi}}\n=\n\\arg\\min_{\\bm{\\psi}}\n\\sum_{i=1}^{m}\n\\sum_{j=1}^{n}\n\\left(\ny_{ij}\n-\nf(t_j, \\bm{\\psi})\n\\right)^2\n\\end{split}\n\\end{equation}\n\\tag{1.7}\n\nCodenls_sub_all &lt;- nls(\n  abelisa ~ f_approx(psi, time),\n  data = tb_after_7,\n  start = list(psi = psi_vals)\n  )\n\nnls_sub_all\n#&gt; Nonlinear regression model\n#&gt;   model: abelisa ~ f_approx(psi, time)\n#&gt;    data: tb_after_7\n#&gt;     psi1     psi2     psi3 \n#&gt; 2.743720 4.247855 0.009601 \n#&gt;  residual sum-of-squares: 35.42\n#&gt; \n#&gt; Number of iterations to convergence: 4 \n#&gt; Achieved convergence tolerance: 2.578e-06\n\nbroom::tidy(nls_sub_all) |&gt;\n  knitr::kable(align = \"ccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\npsi1\n2.7437203\n0.0419748\n65.365923\n0\n\n\npsi2\n4.2478547\n0.0451069\n94.173147\n0\n\n\npsi3\n0.0096014\n0.0010454\n9.184298\n0\n\n\n\n\n\n\nCodetb_sub_all_pred &lt;- tb_f_approx |&gt;\n  mutate(\n  prediction = predict(nls_sub_all, newdata = tb_f_approx)  \n  )\n# tb_sub_all_pred\n\n\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  labs(\n    title = \"Antibody concentration vs. NLM pred\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.23: The antibody concentration during time for all subjects and vs. approximation function (green) vs. NLM prediction (blue)\n\n\n\n\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.24: The antibody concentration during time for all subjects and the NLM prediction\n\n\n\n\n\n1.6.3 Multiple models fitted on multiple subjects\n\nCoden_subjects &lt;- tb_after_7 |&gt;\n  pull(id) |&gt;\n  n_distinct()\n\navailable_ids_vec &lt;- tb_after_7 |&gt;\n  pull(id) |&gt;\n  unique() |&gt;\n  as.character() |&gt;\n  parse_number()\n\nsub_indiv &lt;- tibble()\n\n\n\nCodepsi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.0065)\n\nfor(i in available_ids_vec){\n  nls_sub_i &lt;- nls(\n    abelisa ~ f_approx(psi, time),\n    data = tb_after_7 |&gt; filter(id == str_c(\"ID\", i)),\n    start = list(psi = psi_vals)\n    )  \n  \n  tb_sub_i_pred &lt;- tibble(\n    time = time,\n    id = rep(str_c(\"ID\", i), length(time))\n    ) \n  \n  tb_sub_i_pred &lt;- tb_sub_i_pred |&gt;\n    mutate(pred = predict(nls_sub_i, newdata = tb_sub_i_pred))\n  \n  sub_indiv &lt;- bind_rows(sub_indiv, tb_sub_i_pred)\n  }\n\n\n\nCodesub_indiv &lt;- sub_indiv |&gt;\n  relocate(id, .before = time) |&gt;\n  mutate(\n    id = factor(id, ordered = TRUE)\n  )\nsub_indiv\n#&gt; # A tibble: 31,132 × 3\n#&gt;   id     time  pred\n#&gt;   &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 ID1       7  4.34\n#&gt; 2 ID1       8  4.32\n#&gt; 3 ID1       9  4.31\n#&gt; 4 ID1      10  4.29\n#&gt; 5 ID1      11  4.28\n#&gt; 6 ID1      12  4.27\n#&gt; # ℹ 31,126 more rows\n\n\n\nCodetb_after_7 |&gt;\n  ggplot() +\n  geom_point(\n    aes(x = time, y = abelisa, group = id),\n    color = \"tomato\",\n    size = 2\n  ) +\n  geom_line(\n    data = sub_indiv,\n    aes(x = time, y = pred, group = id),\n    color = \"darkseagreen\",\n    linewidth = 1\n  ) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n  facet_wrap( ~ id)\n\n\n\n\n\n\nFigure 1.25: The antibody concentration during time for all subjects and the NLM individual predictions",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Ebola</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Non-linear mixed effects models",
    "section": "",
    "text": "Preface\nCase study for non linear models for ebola antibody behaviour.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "ebola.html#model",
    "href": "ebola.html#model",
    "title": "1  Ebola",
    "section": "\n1.9 Model",
    "text": "1.9 Model\nLet \\bm{\\psi} denote the vector of paramters which accounts for five biological markers:\n\n\n\\delta_L is the decay rate of the long-lived (LL) antibodies,\n\n\\phi_L = \\theta_L L_0 is the influx of the LL antibodies, where \\theta_L is production rate of antibodies by LL antibody secreting cells,\n\n\\delta_S is the decay rate of the short-lived (SL) antibodies,\n\n\\phi_S = \\theta_S S_0 is the influx of SL antibodies, where \\theta_S is the production rate of antibodies by SL antibody secreting cells,\n\n\\delta_{Ab} - decay rate of antibodies, i.e.\n\n\n\\begin{equation}\n\\bm{\\psi}=\n\\begin{bmatrix}\n\\phi_S & \\delta_S & \\phi_L & \\delta_L & \\delta_{Ab}\n\\end{bmatrix}\n\\end{equation}\n\\tag{1.24}\nand the follwoing mixed-effect model each paramter \\bm{\\psi}_{k}, with k = 1, \\ldots, 5:\n\n\\begin{equation}\n\\log{\\left( \\psi_{k}^{i} \\right)}\n=\n\\log{\\left( \\psi_{k} \\right)}\n+\n\\bm{\\beta}^{T}_{k}\n\\mathbf{z}_{k}^{i}\n+\n\\nu_{k}^{i}\n,\n\\end{equation}\n\nwhere\n\n\\bm{\\psi}^{i}_{k} represents the kth parameters corresponding to the ith subject,\n\\bm{\\psi}_{k} represents the fixed effect corresponding to the kth element of the parameters vector,\n\\mathbf{z}^{i}_{k} represents the vector of independent variables of the model,\n\\bm{\\beta}_{k} represents the coefficents corresponding to \\mathrm{z}^{i}_{k},\n\\nu^{i}_{k} represents the individual effect, assumed to be normally distributed with \\mathbb{V}\\left[\\nu^{i}_{k}\\right] = \\omega_{k}^{2} and mutally independent\n\n\n\n\n\nPasin, Chloé, Irene Balelli, Thierry Van Effelterre, Viki Bockstal, Laura Solforosi, Mélanie Prague, Macaya Douoguih, and Rodolphe Thiébaut. 2019. “Dynamics of the Humoral Immune Response to a Prime-Boost Ebola Vaccine: Quantification and Sources of Variation.” Edited by Mark T. Heise. Journal of Virology 93 (18). https://doi.org/10.1128/jvi.00579-19.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Ebola</span>"
    ]
  },
  {
    "objectID": "ebola.html#first-approximations",
    "href": "ebola.html#first-approximations",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.5 First approximations",
    "text": "1.5 First approximations\nThe goal here is to find the analytical form of a exponential functional that can model the behavior of the antibody concentration during time.\nImportantly, the behavior will be considered starting with day 7, which effectively means the exclusion of the the first (time) measurement for each subject in the data frame.\n\ntb_after_7 &lt;- tb_clean |&gt;\n  filter(time != 0)\n\nThe antibody concentration is decreasing exponential and (apparently) platoes the following function is considered to model the antibody concentration:\n\n\\begin{equation}\nf(t)\n=\ny_{\\text{min}}\n+\n\\left(\ny_{\\text{max}} - y_{\\text{min}}\n\\right)\n\\exp(-rt)\n\\end{equation}\n\\tag{1.1}\nThe parameters are computed in the following chunk:\n\nrange_abelisa_average &lt;- tb_after_7 |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  pull(mean_abelisa) |&gt;\n  range()\nrange_abelisa_average\n#&gt; [1] 2.752019 4.096533\n\nrange_time &lt;- tb_after_7 |&gt;\n  pull(time) |&gt;\n  range()\nrange_time\n#&gt; [1]   7 730\n\n\nf_approx &lt;- function(psi, time){\n  y_min &lt;- psi[1]\n  y_max &lt;- psi[2]\n  rate &lt;- psi[3]\n  return(y_min + (y_max - y_min) * exp(-rate * time)) \n}\n\n\ntime &lt;- seq(range_time[1], range_time[2], 1)\n\n#psi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.007)\npsi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.0065)\n\n\ntb_f_approx &lt;- tibble(\n  time  = time,\n  f = f_approx(psi_vals, time)\n)\n\ntb_f_approx\n#&gt; # A tibble: 724 × 2\n#&gt;    time     f\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     7  4.04\n#&gt; 2     8  4.03\n#&gt; 3     9  4.02\n#&gt; 4    10  4.01\n#&gt; 5    11  4.00\n#&gt; 6    12  4.00\n#&gt; # ℹ 718 more rows\n\nCodetb_after_7 |&gt;\n  ggplot() +\n  geom_point(aes(x = time, y = abelisa, group = id), color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration vs. approx. func.\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\ntb_after_7 |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  ggplot(aes(x = time, y = mean_abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Average antibody conc. vs. approx func.\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.19: Antibody concentration vs. approximation function",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#non-linear-nl-model",
    "href": "ebola.html#non-linear-nl-model",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.6 Non-linear (NL) model",
    "text": "1.6 Non-linear (NL) model\nIn the following,\n\n\nm denotes the number of subjects,\n\nn denotes the number of measurements (in this case the concentration measurements) for each subject taken at different time instants.\n\nThe measurement corresponding to ith patient at the jth time instant is denoted by y_{ij}, with\n\n\ni = 1, \\ldots, m, (in this case m = 43, accounting for the removed data with corresponding negative ages)\n\nj = 1, \\ldots, n (in this case n = 8).\n\ny_{ij} is viewed as the dependent variable (in this case the abelisa variable representing the antibody concentration) of a non-linear model, writing\n\n\\begin{equation}\n\\begin{split}\ny_{ij}\n=\nf(\\bm{\\psi}, t_j)\n+\n\\epsilon_{ij}\n,\n\\end{split}\n\\end{equation}\n\\tag{1.2}\nwhere\n\n\nf represents a non-linear model,\n\nt_j represents the jth time instant,\n\n\\bm{\\psi} represents the parameters vector,\n\n\\epsilon_{ij} accounts for the modeling error and uncertainty.\n\n\n1.6.1 One subject\nBefore considering the model Equation 1.2 accounting for all subjects, a single subject is considered. For illustration, Figure 1.20 shows the evolution of the antibody concentration during time for subject ID1.\n\nCodetb_after_7 |&gt;\n  filter(id == \"ID1\") |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") + \n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration during time for subject ID1\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.20: The antibody concentration during time for subject ID1\n\n\n\n\nIn this case, the model writes\n\n\\begin{equation}\n\\begin{split}\ny_{j} = f(\\bm{\\psi}, t_j) + \\epsilon_j,\n\\end{split}\n\\end{equation}\n\\tag{1.3}\ni.e. the subject’s index i is dropped and the only measurement variation is due to the measurement timing, with the least-squares estimate given by\n\n\\begin{equation}\n\\begin{split}\n\\widehat{\\bm{\\psi}}\n=\n\\arg\\min_{\\bm{\\psi}}\n\\sum_{j=1}^{n}\n\\left(\ny_j\n-\nf(\\bm{\\psi}, t_j)\n\\right)^2\n\\end{split}\n\\end{equation}\n\\tag{1.4}\nwith\n\n\\begin{equation}\n\\begin{split}\n\\bm{\\psi}\n=\n\\begin{bmatrix}\n\\phi_1 & \\phi_2 & \\phi_3\n\\end{bmatrix}\n.\n\\end{split}\n\\end{equation}\n\\tag{1.5}\n\nCodenls_sub_1 &lt;- nls(\n  abelisa ~ f_approx(psi, time),\n  data = tb_after_7 |&gt; filter(id == \"ID1\"),\n  start = list(psi = psi_vals)\n  )\n\nnls_sub_1\n#&gt; Nonlinear regression model\n#&gt;   model: abelisa ~ f_approx(psi, time)\n#&gt;    data: filter(tb_after_7, id == \"ID1\")\n#&gt;     psi1     psi2     psi3 \n#&gt; 2.369908 4.441104 0.007356 \n#&gt;  residual sum-of-squares: 0.03733\n#&gt; \n#&gt; Number of iterations to convergence: 6 \n#&gt; Achieved convergence tolerance: 6.02e-06\n\nbroom::tidy(nls_sub_1) |&gt;\n  knitr::kable(align = \"ccc\")\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\npsi1\n2.3699077\n0.0878109\n26.988771\n0.0000112\n\n\npsi2\n4.4411042\n0.0762377\n58.253396\n0.0000005\n\n\npsi3\n0.0073556\n0.0010835\n6.788539\n0.0024586\n\n\n\n\n\n\nCodetb_sub_1_pred &lt;- tb_f_approx |&gt;\n  mutate(\n  prediction = predict(nls_sub_1, newdata = tb_f_approx)  \n  )\ntb_sub_1_pred\n#&gt; # A tibble: 724 × 3\n#&gt;    time     f prediction\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1     7  4.04       4.34\n#&gt; 2     8  4.03       4.32\n#&gt; 3     9  4.02       4.31\n#&gt; 4    10  4.01       4.29\n#&gt; 5    11  4.00       4.28\n#&gt; 6    12  4.00       4.27\n#&gt; # ℹ 718 more rows\n\n\n\nCodetb_after_7 |&gt;\n  filter(id == \"ID1\") |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_sub_1_pred\n    ) +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_1_pred\n    ) +\n  labs(\n    title = \"Antibody concentration vs. NLM pred\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.21: The antibody concentration during time for subject ID1 vs. approximation function (green) vs. NLM prediction (blue)\n\n\n\n\n\n1.6.2 Multiple subjects\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration during time for all subjects\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.22: The antibody concentration during time for all subjects vs. approximation function\n\n\n\n\nThe model for multiple subjects is given by Equation 1.2 and the LS estimate is given by\n\n\\begin{equation}\n\\begin{split}\n\\widehat{\\bm{\\psi}}\n=\n\\arg\\min_{\\bm{\\psi}}\n\\sum_{i=1}^{m}\n\\sum_{j=1}^{n}\n\\left(\ny_{ij}\n-\nf(\\bm{\\psi}, t_j)\n\\right)^2\n\\end{split}\n\\end{equation}\n\\tag{1.6}\n\nCodenls_sub_all &lt;- nls(\n  abelisa ~ f_approx(psi, time),\n  data = tb_after_7,\n  start = list(psi = psi_vals)\n  )\n\nnls_sub_all\n#&gt; Nonlinear regression model\n#&gt;   model: abelisa ~ f_approx(psi, time)\n#&gt;    data: tb_after_7\n#&gt;     psi1     psi2     psi3 \n#&gt; 2.743720 4.247855 0.009601 \n#&gt;  residual sum-of-squares: 35.42\n#&gt; \n#&gt; Number of iterations to convergence: 4 \n#&gt; Achieved convergence tolerance: 2.578e-06\n\nbroom::tidy(nls_sub_all) |&gt;\n  knitr::kable(align = \"ccc\")\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\npsi1\n2.7437203\n0.0419748\n65.365923\n0\n\n\npsi2\n4.2478547\n0.0451069\n94.173147\n0\n\n\npsi3\n0.0096014\n0.0010454\n9.184298\n0\n\n\n\n\n\n\nCodetb_sub_all_pred &lt;- tb_f_approx |&gt;\n  mutate(\n  prediction = predict(nls_sub_all, newdata = tb_f_approx)  \n  )\n# tb_sub_all_pred\n\n\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  labs(\n    title = \"Antibody concentration vs. NLM pred\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.23: The antibody concentration during time for all subjects and vs. approximation function (green) vs. NLM prediction (blue)\n\n\n\n\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.24: The antibody concentration during time for all subjects and the NLM prediction\n\n\n\n\n\n1.6.3 Multiple models fitted on multiple subjects\n\nCoden_subjects &lt;- tb_after_7 |&gt;\n  pull(id) |&gt;\n  n_distinct()\n\navailable_ids_vec &lt;- tb_after_7 |&gt;\n  pull(id) |&gt;\n  unique() |&gt;\n  as.character() |&gt;\n  parse_number()\n\nsub_indiv &lt;- tibble()\n\nset.seed(43)\n\npsi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.0065)\n\nfor(i in available_ids_vec){\n  nls_sub_i &lt;- nls(\n    abelisa ~ f_approx(psi, time),\n    data = tb_after_7 |&gt; filter(id == str_c(\"ID\", i)),\n    start = list(psi = psi_vals)\n    )  \n  \n  tb_sub_i_pred &lt;- tibble(\n    time = time,\n    id = rep(str_c(\"ID\", i), length(time))\n    ) \n  \n  tb_sub_i_pred &lt;- tb_sub_i_pred |&gt;\n    mutate(pred = predict(nls_sub_i, newdata = tb_sub_i_pred))\n  \n  sub_indiv &lt;- bind_rows(sub_indiv, tb_sub_i_pred)\n  }\n\nsub_indiv &lt;- sub_indiv |&gt;\n  relocate(id, .before = time) |&gt;\n  mutate(\n    id = factor(id, ordered = TRUE)\n  )\nsub_indiv\n#&gt; # A tibble: 31,132 × 3\n#&gt;   id     time  pred\n#&gt;   &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 ID1       7  4.34\n#&gt; 2 ID1       8  4.32\n#&gt; 3 ID1       9  4.31\n#&gt; 4 ID1      10  4.29\n#&gt; 5 ID1      11  4.28\n#&gt; 6 ID1      12  4.27\n#&gt; # ℹ 31,126 more rows\n\n\n\nCodetb_after_7 |&gt;\n  ggplot() +\n  geom_point(\n    aes(x = time, y = abelisa, group = id),\n    color = \"tomato\",\n    size = 2\n  ) +\n  geom_line(\n    data = sub_indiv,\n    aes(x = time, y = pred, group = id),\n    color = \"darkseagreen\",\n    linewidth = 1\n  ) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n  facet_wrap( ~ id)\n\n\n\n\n\n\nFigure 1.25: The antibody concentration during time for all subjects and the NLM individual predictions",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#nonlinear-mixed-effects-nlme-model",
    "href": "ebola.html#nonlinear-mixed-effects-nlme-model",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.7 Nonlinear mixed effects (NLME) model",
    "text": "1.7 Nonlinear mixed effects (NLME) model\nWill be done via stochastic approximation expectation maximization (SAEM) using the saemix package.\nFirst thing: account for the specificity of saemix which expects the id column in the data frame to be of numerical type. The next chunk is re-transforming the id column in the tibble into a numerical variable and parse the numerical value (i.e. removes “ID” from “IDi”)\n\nCodetb_after_7 &lt;- tb_after_7 |&gt;\n  mutate(\n    id = parse_number(as.character(id))\n    )\ntb_after_7\n#&gt; # A tibble: 301 × 8\n#&gt;      id  time sex      age age_updated   bmi country     abelisa\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt;\n#&gt; 1     1     7 Female  35.5        35.5  20.7 West Africa    4.43\n#&gt; 2     1    15 Female  35.5        35.5  20.7 West Africa    4.12\n#&gt; 3     1    30 Female  35.5        35.6  20.7 West Africa    4.05\n#&gt; 4     1    90 Female  35.5        35.7  20.7 West Africa    3.38\n#&gt; 5     1   180 Female  35.5        36.0  20.7 West Africa    2.94\n#&gt; 6     1   365 Female  35.5        36.5  20.7 West Africa    2.61\n#&gt; # ℹ 295 more rows\n\n\nThe next chunk is defining the data as a saemix object, via saemixData.\n\nCodesaemix_data_nlme &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  units = list(x = \"Days\", y = \"EU/ml\"),\n  automatic = TRUE\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days)\n\n\n\nsaemix_data_nlme\n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt; 301     observations in 43 subjects\n#&gt; First lines of data:\n#&gt;    id time  abelisa mdv cens occ ytype\n#&gt; 1   1    7 4.434471   0    0   1     1\n#&gt; 2   1   15 4.124822   0    0   1     1\n#&gt; 3   1   30 4.050954   0    0   1     1\n#&gt; 4   1   90 3.382073   0    0   1     1\n#&gt; 5   1  180 2.935390   0    0   1     1\n#&gt; 6   1  365 2.606559   0    0   1     1\n#&gt; 7   1  730 2.308632   0    0   1     1\n#&gt; 8   2    7 3.664922   0    0   1     1\n#&gt; 9   2   15 4.143873   0    0   1     1\n#&gt; 10  2   30 3.967767   0    0   1     1\n\nThe next chunk implements the function from Equation 1.1:\n\nCodefunction_approx &lt;- function(psi, id, xidep){\n  time &lt;- xidep[, 1]\n  y_min &lt;- psi[id, 1]\n  y_max &lt;- psi[id, 2]\n  rate &lt;- psi[id, 3]\n  fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n  return(fpred)\n}\n#function_approx\n\n\nThe next chunk is defining the nlme model as a saemix object, via saemixModel function. The model is given by Equation 1.1, the initial values for y_{\\text{min}} and y_{\\text{max}} are set via the range computed over the complete data and the rate r is set at 0.05. The model considers random effects on all three parameters & constant variance, error.model = \"constant\".\n\nCodesaemix_model_nlme &lt;- saemixModel(\n  model = function_approx,\n  description = \"Approx function\", \n  psi0 = matrix(\n    c(1.6, 4.9, 0.05),\n    ncol = 3, \n    byrow = TRUE, \n    dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))),\n  transform.par = c(0, 0, 1),   # log-transform rate only\n  covariance.model = diag(1, 3),  # random effects on all\n  error.model = \"constant\"\n  )\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Approx function\n#&gt;   Model type:  structural\n#&gt; function(psi, id, xidep){\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.1=1 \n#&gt;     No covariate in the model.\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n# saemix_model_nlme\n\n\nThe next chunk is defining the nlme model’s parameters as a (regular R) list:\n\nCodesaemix_options_nlme &lt;- list(\n  seed = 42,\n  save = FALSE, \n  save.graph = FALSE,\n  displayProgress = FALSE,\n  print = FALSE\n  )\n#saemix_options_nlme\n\n\nThe next chunk is fitting the nlme model, a saemix object, created via saemix function.\n\nCodesaemix_fit_nlme &lt;- saemix(\n  saemix_model_nlme,\n  saemix_data_nlme,\n  saemix_options_nlme\n  )\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\n# saemix_fit_nlme\n\n\nThe results are\n\nsaemix_fit_nlme@results\n#&gt; Fixed effects\n#&gt;  Parameter Estimate   SE      CV(%)\n#&gt;  y_min     2.74135  0.050503 1.84  \n#&gt;  y_max     4.24859  0.052600 1.24  \n#&gt;  rate      0.00961  0.000756 7.87  \n#&gt;  a.1       0.25759  0.012961 5.03  \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)  \n#&gt;  omega2.y_min 6.85e-02 0.0201     29.3\n#&gt;  omega2.y_max 7.12e-02 0.0221     31.0\n#&gt;  omega2.rate  1.75e-05 0.0408 233084.8\n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 150.281 \n#&gt;        AIC= 164.281 \n#&gt;        BIC= 176.6094 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 150.0711 \n#&gt;        AIC= 164.0711 \n#&gt;        BIC= 176.3995\n\n\nsaemix_fit_nlme@results@fixed.effects\n#&gt; [1] 2.741351986 4.248585754 0.009611671\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for subject 1:\n\nCodefit_with_preds &lt;- saemix.predict(saemix_fit_nlme)\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\ntb_data &lt;- fit_with_preds@data@data\ntb_predictions &lt;- fit_with_preds@results@predictions\n\ntb_complete &lt;- cbind(tb_data, tb_predictions)\n\nggplot(subset(tb_complete, id == 1), aes(x = time)) +\n  geom_point(aes(y = abelisa, color = \"Observed\"), size = 2) +\n  geom_line(aes(y = ipred, color = \"Individual prediction\"), linewidth = 1.5) +\n  geom_line(aes(y = ppred, color = \"Population prediction\"), linewidth = 1.5, linetype = \"dashed\") +\n  scale_color_manual(\n    name = NULL,\n    values = c(\n      \"Observed\" = \"tomato\",\n      \"Individual prediction\" = \"darkseagreen\",\n      \"Population prediction\" = \"violet\"\n    )\n  ) +\n  labs(\n    title = str_c(\"Subject\", 1, \": Obs vs. Pred\", sep = \" \"),\n    x = \"Time\",\n    y = \"Antibody levels (EU/ml)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n  )\n\n\n\n\n\n\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for the subjects in the data set.\n\nCodeggplot(tb_complete, aes(x = time)) +\n  geom_point(aes(y = abelisa), color = \"tomato\", size = 2) +\n  geom_line(aes(y = ipred), color = \"darkseagreen\", linewidth = 1.5) +\n  geom_line(aes(y = ppred), color = \"violet\", linewidth = 1.5, linetype = \"dashed\") +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\n\nCodepsi &lt;- psi(saemix_fit_nlme) |&gt;\n  as_tibble() |&gt;\n  rowid_to_column(\"iteration\")\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_min)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_min\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_max)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_max\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = rate)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"rate\"    \n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a) y_min\n\n\n\n\n\n\n\n\n\n(b) y_max\n\n\n\n\n\n\n\n\n\n(c) rate\n\n\n\n\n\n\nFigure 1.26: Fixed effects during iterations\n\n\n\nCode# Fit nonlinear mixed model\n# nlme_sub_all &lt;- nlme(\n#   model = abelisa ~ f_approx_2(y_min, y_max, rate, time),\n#   data = tb_after_7,\n#   fixed = y_min + y_max + rate ~ 1,\n#   random = y_min ~ 1 | id,\n#   start = psi_vals,\n#   control = nlmeControl(msMaxIter = 200)\n#   )\n# \n# nlme_sub_all\n\n\n# nlme_fit &lt;- nlme(\n#   model = y ~ logistic_model(Asym, Rate, xmid, time),\n#   data = data,\n#   fixed = Asym + Rate + xmid ~ 1,\n#   random = Asym + Rate ~ 1 | subject,  # Random effects on Asym and Rate\n#   start = c(Asym = 90, Rate = 0.2, xmid = 4.5),\n#   control = nlmeControl(msMaxIter = 200)\n# )\n# \n# nlme_fit\n\n\n#broom::tidy(nlme_sub_all) |&gt;\n#  knitr::kable(align = \"ccc\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#the-proposed-model",
    "href": "ebola.html#the-proposed-model",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.8 The proposed model",
    "text": "1.8 The proposed model\nThe non-linear model proposed in (Pasin et al. 2019) based on three compartments, i.e. the SL cells (S), the LL cells (L) and the antibodies (A) writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d}S}{\\text{d}t}\n&\n=\n-\n\\delta_S S\n,\n\\\\\n\\frac{\\text{d}L}{\\text{d}t}\n&\n=\n-\n\\delta_L L\n,\n\\\\\n\\frac{\\text{d}A}{\\text{d}t}\n&\n=\n\\theta_S S\n+\n\\theta_L L\n-\n\\delta_S A\n,\n\\end{split}\n\\end{equation}\n\\tag{1.7}\nwith\n\n\\delta_S representing the decay rate over time of the long-lived (SL) antibody-secreting cells,\n\\theta_S representing the antibodies production rate of SL antibody-secreting cells,\n\\delta_L representing the decay rate over time of the long-lived (LL) antibodies,\n\\theta_L representing the antibodies production rate of LL antibody-secreting cells,\n\\delta_A representing the decay rate of antibodies.\n\nThe equation for the antibodies A is the non-homogeneous linear ordinary differential equation (ODE) given by:\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n=\n\\phi_S\n\\exp{\\left(-\\delta_S t \\right)}\n+\n\\phi_L\n\\exp{\\left( -\\delta_L t \\right)}\n-\n\\delta_A\nA\n,\n\\end{equation}\n\\tag{1.8}\nwith\n\n\\begin{equation}\n\\phi_S = \\theta_S S_0,\n\\quad\nS_0 = S(0)\n,\n\\end{equation}\n\\tag{1.9}\nand \n\\begin{equation}\n\\phi_L = \\theta_L L_0,\n\\quad\nL_0 = L(0)\n,\n\\end{equation}\n\\tag{1.10}\nEquation 1.8 writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+ \\delta_A A\n=\n\\phi_S \\exp(-\\delta_S t)\n+\n\\phi_L \\exp(-\\delta_L t)\n\\end{equation}\n\\tag{1.11}\nor equivalently\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t} + P(t) A = Q(t)\n\\end{equation}\n\\tag{1.12}\nwith:\n\n\nP(t) = \\delta_f (i.e. constant),\n\nQ(t) = \\phi_S \\exp(-\\delta_S t) + \\phi_L \\exp(-\\delta_L t).\n\nThe homogeneous equation writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+\n\\delta_A\nA\n=\n0\n,\n\\end{equation}\n\\tag{1.13}\nwith the solution\n\n\\begin{equation}\nA_h(t)\n=\nc\n\\exp(-\\delta_A t)\n,\n\\end{equation}\n\\tag{1.14}\nwith c a constant determined by the initial conditions (i.e A(0)). The non-homogeneous part can be solved using an integrating factor. Let the integrating factor be\n\n\\begin{equation}\n\\mu(t)\n=\n\\exp{\n\\left(\n\\int \\delta_A \\text{d}t\n\\right)\n}\n=\n\\exp{(\\delta_A t)}\n,\n\\end{equation}\n\\tag{1.15}\nand multiplying by the integrating factor, Equation 1.11 writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d} }{\\text{d}t}\n\\left(\n\\exp(\\delta_f t) f(t)\n\\right)\n&\n=\n\\phi_S\n\\exp\n\\left(\n(\\delta_A - \\delta_S) t\n\\right)\n\\\\\n&\n+\n\\phi_L\n\\exp\n\\left(\n(\\delta_A - \\delta_L) t\n\\right)\n.\n\\end{split}\n\\end{equation}\n\\tag{1.16}\nIntegrating both sides (with respect to t) writes:\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\phi_S\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_S) t \\right)\n}\n\\text{d}t\n\\\\\n&\n+\n\\phi_L\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_L) t \\right)\n}\n\\text{d}t\n.\n\\end{split}\n\\end{equation}\n\\tag{1.17}\nThe first integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n+\nc_1\n,\n\\end{equation}\n\\tag{1.18}\nand the second integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n+\nc_2\n.\n\\end{equation}\n\\tag{1.19}\nPlugging Equation 1.18 and Equation 1.19 in Equation 1.17 writes\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\\\\n&\n+\nc\n.\n\\end{split}\n\\end{equation}\n\\tag{1.20}\nhence\n\n\\begin{equation}\n\\begin{split}\nA(t)\n&\n=\nc\n\\exp(-\\delta_A t)\n\\\\\n&\n+\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp \\left( -\\delta_S t \\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp \\left( -\\delta_L t \\right)\n,\n\\end{split}\n\\end{equation}\n\\tag{1.21}\nwith c a constant determined by the initial condition (i.e. A(0)) plugged-in from the data, i.e. the abelisa value corresponding to the second time instance measurement (i.e. the 7 days corresponding measurement). Assuming the second time instance measurement is A(0) = a, the constant writes\n\n\\begin{equation}\nc\n=\na\n-\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n-\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n.\n\\end{equation}\n\\tag{1.22}\nLet \\bm{\\psi} denote the vector of parameters for the decay rates (LL antibodies, SL antibodies and antibodies) and \\phi_S and \\phi_L\n\n\\begin{equation}\n\\bm{\\xi}=\n\\begin{bmatrix}\n\\phi_S & \\delta_S & \\phi_L & \\delta_L & \\delta_{Ab}\n\\end{bmatrix}\n.\n\\end{equation}\n\\tag{1.23}\nThe following mixed-effect model each parameter \\xi_{k}, with k = 1, \\ldots, 5 is considered:\n\n\\begin{equation}\n\\log{\\left( \\xi_{k}^{i} \\right)}\n=\n\\log{\\left( \\xi_{k0} \\right)}\n+\n\\bm{\\beta}^{T}_{k}\n\\mathbf{z}_{k}^{i}\n+\n\\nu_{k}^{i}\n,\n\\end{equation}\n\\tag{1.24}\nwhere\n\n\\xi^{i}_{k} represents the kth parameters corresponding to the ith subject,\n\\xi_{k0} represents the fixed effect corresponding to the kth element of the parameters vector,\n\\mathbf{z}^{i}_{k} represents the vector of independent variables of the model,\n\\bm{\\beta}_{k} represents the coefficents corresponding to \\mathrm{z}^{i}_{k},\n\n\\nu^{i}_{k} represents the individual effect, assumed to\n\nfollow a centered normal distributed with variance \\omega_{k}^{2}\n\n\n\n\\begin{equation}\n\\nu^{i}_{k}\n\\sim\n\\mathcal N \\left( 0, \\omega_{k}^{2} \\right)\n\\end{equation}\n\\tag{1.25}\n\nbe mutually independent\n\n\n\\begin{equation}\n\\nu^{i}_{k} \\perp \\!\\!\\!\\! \\perp\\nu^{j}_{l}\n\\end{equation}\n\\tag{1.26}\n\n\nThe antibody concentration for patient i at the jth time instance measurement is assumed to be an additional error model\n\n\\begin{equation}\n\\mathrm{y}_{ij}\n=\n\\log_{10}\n\\left(\nA(\\bm{\\xi}^{i},t_{ij})\n\\right)\n+\n\\epsilon_{ij}\n,\n\\end{equation}\n\\tag{1.27}\nwith the noise following a centered normal distributed with the same variance \\omega_{A}^{2} (homoscedasticity), i.e.\n\n\\begin{equation}\n\\epsilon_{ij}\n\\sim\n\\mathcal N \\left( 0, \\sigma_{A}^{2} \\right)\n.\n\\end{equation}\n\\tag{1.28}\nThe complete set of model’s parameters is\n\n\\begin{equation}\n\\bm{\\theta}\n=\n\\begin{bmatrix}\n\\left( \\xi_{k0} \\right)_{k = 1, 5}\n&\n\\left( \\bm{\\beta}_{k} \\right)_{k = 1, 5}\n&\n\\left( \\omega_{k} \\right)_{k = 1, 5}\n&\n\\sigma_{A}\n\\end{bmatrix}\n\\end{equation}\n\\tag{1.29}\nCentering the age in the data:\n\ntb_clean_centered &lt;- tb_clean |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_clean_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_clean_centered\n#   )\n\n\ntb_after_7_centered &lt;- tb_after_7 |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_after_7_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_after_7_centered\n#   )\n\n\n# # consntat corresponding to intial values\n# c_const &lt;- 100\n# \n# # Nonlinear function with log-parameters and fixed c\n# f_model_log &lt;- function(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L) {\n#   phi_S &lt;- exp(log_phi_S)\n#   phi_L &lt;- exp(log_phi_L)\n#   delta_A &lt;- exp(log_delta_A)\n#   delta_S &lt;- exp(log_delta_S)\n#   delta_L &lt;- exp(log_delta_L)\n# \n#   c_const * exp(-delta_A * time) +\n#     (phi_S / (delta_A - delta_S)) * exp(-delta_S * time) +\n#     (phi_L / (delta_A - delta_L)) * exp(-delta_L * time)\n# }\n# \n# # Starting values (log-scale for parameters)\n# start_vals &lt;- c(\n#   log_phi_S = log(50),\n#   log_phi_L = log(30),\n#   log_delta_A = log(0.0005),\n#   log_delta_S = log(0.005),\n#   log_delta_L = log(0.001)\n# )\n# \n# # Fit nlme model:\n# nlme_model &lt;- nlme(\n#   abelisa ~ f_model_log(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L),\n#   \n#   # Data: \n#   data = tb_after_7_centered,\n# \n#   # Fixed effects:\n#   fixed = list(\n#     log_phi_S ~ sex + age_centered + bmi + country,\n#     log_phi_L ~ sex + age_centered + bmi + country,\n#     log_delta_A ~ sex + age_centered + bmi + country,\n#     log_delta_S + log_delta_L ~ 1  # no covariates on delta S and L params\n#   ),\n# \n#   # Random effects on log_phi_S, log_phi_L, per subject\n#   random = pdDiag(log_phi_S + log_phi_L ~ 1 | id),\n# \n#   start = start_vals,\n# \n#   control = nlmeControl(\n#     pnlsTol = 0.1, \n#     msMaxIter = 100, \n#     msMaxEval = 1000\n#   )\n# )\n# \n# summary(nlme_model)\n\n\n\n\n\nPasin, Chloé, Irene Balelli, Thierry Van Effelterre, Viki Bockstal, Laura Solforosi, Mélanie Prague, Macaya Douoguih, and Rodolphe Thiébaut. 2019. “Dynamics of the Humoral Immune Response to a Prime-Boost Ebola Vaccine: Quantification and Sources of Variation.” Edited by Mark T. Heise. Journal of Virology 93 (18). https://doi.org/10.1128/jvi.00579-19.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#an-approximation-function",
    "href": "ebola.html#an-approximation-function",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.5 An approximation function",
    "text": "1.5 An approximation function\nThe goal here is to find the analytical form of a exponential functional that can model the behavior of the antibody concentration during time.\nImportantly, the behavior will be considered starting with day 7, which effectively means the exclusion of the the first (time) measurement for each subject in the data frame.\n\ntb_after_7 &lt;- tb_clean |&gt;\n  filter(time != 0)\n\nThe antibody concentration is decreasing exponential and (apparently) platoes the following function is considered to model the antibody concentration:\n\n\\begin{equation}\nf(t)\n=\n\\phi_1\n+\n\\left(\n\\phi_2 - \\phi_1\n\\right)\n\\exp(- \\phi_3 t)\n\\end{equation}\n\\tag{1.1}\nThe parameters are computed in the following chunk:\n\nrange_abelisa_average &lt;- tb_after_7 |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  pull(mean_abelisa) |&gt;\n  range()\nrange_abelisa_average\n#&gt; [1] 2.752019 4.096533\n\nrange_time &lt;- tb_after_7 |&gt;\n  pull(time) |&gt;\n  range()\nrange_time\n#&gt; [1]   7 730\n\n\nf_approx &lt;- function(psi, time){\n  y_min &lt;- psi[1]\n  y_max &lt;- psi[2]\n  rate &lt;- psi[3]\n  return(y_min + (y_max - y_min) * exp(-rate * time)) \n}\n\n\ntime &lt;- seq(range_time[1], range_time[2], 1)\n\n#psi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.007)\npsi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.0065)\n\n\ntb_f_approx &lt;- tibble(\n  time  = time,\n  f = f_approx(psi_vals, time)\n)\n\ntb_f_approx\n#&gt; # A tibble: 724 × 2\n#&gt;    time     f\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     7  4.04\n#&gt; 2     8  4.03\n#&gt; 3     9  4.02\n#&gt; 4    10  4.01\n#&gt; 5    11  4.00\n#&gt; 6    12  4.00\n#&gt; # ℹ 718 more rows\n\nCodetb_after_7 |&gt;\n  ggplot() +\n  geom_point(aes(x = time, y = abelisa, group = id), color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration vs. approx. func.\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\ntb_after_7 |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  ggplot(aes(x = time, y = mean_abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Average antibody conc. vs. approx func.\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.19: Antibody concentration vs. approximation function",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#non-linear-mixed-effects-nlme-model---no-covariates",
    "href": "ebola.html#non-linear-mixed-effects-nlme-model---no-covariates",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.7 Non-linear mixed effects (NLME) model - no covariates",
    "text": "1.7 Non-linear mixed effects (NLME) model - no covariates\nWill be done via stochastic approximation expectation maximization (SAEM) using the saemix package.\nFirst thing: account for the specificity of saemix which expects the id column in the data frame to be of numerical type. The next chunk is re-transforming the id column in the tibble into a numerical variable and parse the numerical value (i.e. removes “ID” from “IDi”)\n\nCodetb_after_7 &lt;- tb_after_7 |&gt;\n  mutate(\n    id = parse_number(as.character(id))\n    )\ntb_after_7\n#&gt; # A tibble: 301 × 8\n#&gt;      id  time sex      age age_updated   bmi country     abelisa\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt;\n#&gt; 1     1     7 Female  35.5        35.5  20.7 West Africa    4.43\n#&gt; 2     1    15 Female  35.5        35.5  20.7 West Africa    4.12\n#&gt; 3     1    30 Female  35.5        35.6  20.7 West Africa    4.05\n#&gt; 4     1    90 Female  35.5        35.7  20.7 West Africa    3.38\n#&gt; 5     1   180 Female  35.5        36.0  20.7 West Africa    2.94\n#&gt; 6     1   365 Female  35.5        36.5  20.7 West Africa    2.61\n#&gt; # ℹ 295 more rows\n\n\nThe next chunk is defining the data as a saemix object, via saemixData.\n\nCodesaemix_data_nlme &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  units = list(x = \"Days\", y = \"EU/ml\"),\n  automatic = TRUE\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days)\n\n\n\nsaemix_data_nlme\n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt; 301     observations in 43 subjects\n#&gt; First lines of data:\n#&gt;    id time  abelisa mdv cens occ ytype\n#&gt; 1   1    7 4.434471   0    0   1     1\n#&gt; 2   1   15 4.124822   0    0   1     1\n#&gt; 3   1   30 4.050954   0    0   1     1\n#&gt; 4   1   90 3.382073   0    0   1     1\n#&gt; 5   1  180 2.935390   0    0   1     1\n#&gt; 6   1  365 2.606559   0    0   1     1\n#&gt; 7   1  730 2.308632   0    0   1     1\n#&gt; 8   2    7 3.664922   0    0   1     1\n#&gt; 9   2   15 4.143873   0    0   1     1\n#&gt; 10  2   30 3.967767   0    0   1     1\n\nThe next chunk implements the function from Equation 1.1:\n\nCodefunction_approx &lt;- function(psi, id, xidep){\n  time &lt;- xidep[, 1]\n  y_min &lt;- psi[id, 1]\n  y_max &lt;- psi[id, 2]\n  rate &lt;- psi[id, 3]\n  fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n  return(fpred)\n}\n#function_approx\n\n\nThe next chunk is defining the nlme model as a saemix object, via saemixModel function. The model is given by Equation 1.1, the initial values for \\phi_1 and \\phi_2 are set via the range computed over the complete data and the rate r is set at 0.05. The model considers random effects on all three parameters & constant variance, error.model = \"constant\".\n\nCodesaemix_model_nlme &lt;- saemixModel(\n  model = function_approx,\n  description = \"Approx function\", \n  psi0 = matrix(\n    c(1.6, 4.9, 0.05),\n    ncol = 3, \n    byrow = TRUE, \n    dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))),\n  transform.par = c(0, 0, 1),   # log-transform rate only\n  covariance.model = diag(1, 3),  # random effects on all\n  error.model = \"constant\"\n  )\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Approx function\n#&gt;   Model type:  structural\n#&gt; function(psi, id, xidep){\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.1=1 \n#&gt;     No covariate in the model.\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n# saemix_model_nlme\n\n\nThe next chunk is defining the nlme model’s parameters as a (regular R) list:\n\nCodesaemix_options_nlme &lt;- list(\n  seed = 42,\n  save = FALSE, \n  save.graph = FALSE,\n  displayProgress = FALSE,\n  print = FALSE\n  )\n#saemix_options_nlme\n\n\nThe next chunk is fitting the nlme model, a saemix object, created via saemix function.\n\nCodesaemix_fit_nlme &lt;- saemix(\n  saemix_model_nlme,\n  saemix_data_nlme,\n  saemix_options_nlme\n  )\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\n# saemix_fit_nlme\n\n\nThe results are\n\nsaemix_fit_nlme@results\n#&gt; Fixed effects\n#&gt;  Parameter Estimate   SE      CV(%)\n#&gt;  y_min     2.74135  0.050503 1.84  \n#&gt;  y_max     4.24859  0.052600 1.24  \n#&gt;  rate      0.00961  0.000756 7.87  \n#&gt;  a.1       0.25759  0.012961 5.03  \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)  \n#&gt;  omega2.y_min 6.85e-02 0.0201     29.3\n#&gt;  omega2.y_max 7.12e-02 0.0221     31.0\n#&gt;  omega2.rate  1.75e-05 0.0408 233084.8\n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 150.281 \n#&gt;        AIC= 164.281 \n#&gt;        BIC= 176.6094 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 150.0711 \n#&gt;        AIC= 164.0711 \n#&gt;        BIC= 176.3995\n\n\nsaemix_fit_nlme@results@fixed.effects\n#&gt; [1] 2.741351986 4.248585754 0.009611671\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for subject 1:\n\nCodefit_with_preds &lt;- saemix.predict(saemix_fit_nlme)\n#&gt; Simulating data using nsim = 1000 simulated datasets\n#&gt; Computing WRES and npde .....\ntb_data &lt;- fit_with_preds@data@data\ntb_predictions &lt;- fit_with_preds@results@predictions\n\ntb_complete &lt;- cbind(tb_data, tb_predictions)\n\nggplot(subset(tb_complete, id == 1), aes(x = time)) +\n  geom_point(aes(y = abelisa, color = \"Observed\"), size = 2) +\n  geom_line(aes(y = ipred, color = \"Individual prediction\"), linewidth = 1.5) +\n  geom_line(aes(y = ppred, color = \"Population prediction\"), linewidth = 1.5, linetype = \"dashed\") +\n  scale_color_manual(\n    name = NULL,\n    values = c(\n      \"Observed\" = \"tomato\",\n      \"Individual prediction\" = \"darkseagreen\",\n      \"Population prediction\" = \"violet\"\n    )\n  ) +\n  labs(\n    title = str_c(\"Subject\", 1, \": Obs vs. Pred\", sep = \" \"),\n    x = \"Time\",\n    y = \"Antibody levels (EU/ml)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n  )\n\n\n\n\n\n\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for the subjects in the data set.\n\nCodeggplot(tb_complete, aes(x = time)) +\n  geom_point(aes(y = abelisa), color = \"tomato\", size = 2) +\n  geom_line(aes(y = ipred), color = \"darkseagreen\", linewidth = 1.5) +\n  geom_line(aes(y = ppred), color = \"violet\", linewidth = 1.5, linetype = \"dashed\") +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\n\nCodepsi &lt;- psi(saemix_fit_nlme) |&gt;\n  as_tibble() |&gt;\n  rowid_to_column(\"iteration\")\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_min)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_min\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_max)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_max\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = rate)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"rate\"    \n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a) y_min\n\n\n\n\n\n\n\n\n\n(b) y_max\n\n\n\n\n\n\n\n\n\n(c) rate\n\n\n\n\n\n\nFigure 1.26: Fixed effects during iterations",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#non-linear-mixed-effects-nlme-model---covariates",
    "href": "ebola.html#non-linear-mixed-effects-nlme-model---covariates",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.8 Non-linear mixed effects (NLME) model - covariates",
    "text": "1.8 Non-linear mixed effects (NLME) model - covariates\n\nCodesaemix_data_nlme &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = c(\"age\"), # age added as covariate \n  units = list(x = \"Days\", y = \"EU/ml\"),\n  automatic = TRUE\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days) \n#&gt;     covariates: age (-)\n\n\n\nsaemix_data_nlme\n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     covariates: age (-) \n#&gt; 301     observations in 43 subjects\n#&gt; First lines of data:\n#&gt;    id time  abelisa      age mdv cens occ ytype\n#&gt; 1   1    7 4.434471 35.49993   0    0   1     1\n#&gt; 2   1   15 4.124822 35.49993   0    0   1     1\n#&gt; 3   1   30 4.050954 35.49993   0    0   1     1\n#&gt; 4   1   90 3.382073 35.49993   0    0   1     1\n#&gt; 5   1  180 2.935390 35.49993   0    0   1     1\n#&gt; 6   1  365 2.606559 35.49993   0    0   1     1\n#&gt; 7   1  730 2.308632 35.49993   0    0   1     1\n#&gt; 8   2    7 3.664922 41.95419   0    0   1     1\n#&gt; 9   2   15 4.143873 41.95419   0    0   1     1\n#&gt; 10  2   30 3.967767 41.95419   0    0   1     1\n\nThe decay rate \\phi_3 is assumed to depend on age through a linear relationship on the log scale, i.e. \n\n\\begin{equation}\n\\log(\\psi^{i}_3)\n=\n\\log(\\psi_3)\n+\n\\beta_{\\text{age}}\n\\left(\n\\text{age}_i\n-\n\\overline{\\text{age}}\n+\n\\nu^{i}\n.\n\\right)\n\\end{equation}\n\\tag{1.7}\n\nmean_age &lt;- mean(tb_after_7$age, na.rm = TRUE)\n\nfunction_approx_age &lt;- function(psi, id, xidep) {\n  time &lt;- xidep[, 1]\n  covariates &lt;- xidep[, -1, drop = FALSE]\n  \n  y_min &lt;- psi[id, 1]\n  y_max &lt;- psi[id, 2]\n  rate  &lt;- psi[id, 3]\n  beta  &lt;- psi[id, 4]\n  \n  age &lt;- covariates[, \"age\"]\n  rate_i &lt;- rate * exp(beta * (age - mean_age))\n  \n  pred &lt;- y_min + (y_max - y_min) * exp(-rate_i * time)\n  return(pred)\n}\n\n\npsi0_vals &lt;- matrix(\n  c(1.6, 4.9, 0.05, 0.01),\n  nrow = 1,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\", \"beta_age\"))\n)\n\ncovariate_matrix &lt;- matrix(c(\n  0, 0, 1, 0  # only 'rate' affected by age\n), nrow = 4, byrow = TRUE)\n\ncovariance_matrix &lt;- diag(c(1, 1, 1, 0))  # random effects only on first 3\n\nsaemix_model_nlme &lt;- saemixModel(\n  model = function_approx_age,\n  description = \"Nonlinear model with age effect on rate\",\n  psi0 = psi0_vals,\n  transform.par = c(0, 0, 1, 0),\n  covariate.model = covariate_matrix,\n  covariance.model = covariance_matrix,\n  error.model = \"constant\"\n)\n#&gt; Error in dimnames(x) &lt;- dn : \n#&gt;   length of 'dimnames' [2] not equal to array extent\n#&gt; [1] \"Creation of SaemixModel failed\"\n\n\n# saemix_fit_nlme &lt;- saemix(\n#   saemix_model_nlme,\n#   saemix_data_nlme,\n#   saemix_options_nlme\n#   )\n\n\n# saemix_fit_nlme@results\n\n\n# saemix_fit_nlme@results@fixed.effects\n\n\nCode# Fit nonlinear mixed model\n# nlme_sub_all &lt;- nlme(\n#   model = abelisa ~ f_approx_2(y_min, y_max, rate, time),\n#   data = tb_after_7,\n#   fixed = y_min + y_max + rate ~ 1,\n#   random = y_min ~ 1 | id,\n#   start = psi_vals,\n#   control = nlmeControl(msMaxIter = 200)\n#   )\n# \n# nlme_sub_all\n\n\n# nlme_fit &lt;- nlme(\n#   model = y ~ logistic_model(Asym, Rate, xmid, time),\n#   data = data,\n#   fixed = Asym + Rate + xmid ~ 1,\n#   random = Asym + Rate ~ 1 | subject,  # Random effects on Asym and Rate\n#   start = c(Asym = 90, Rate = 0.2, xmid = 4.5),\n#   control = nlmeControl(msMaxIter = 200)\n# )\n# \n# nlme_fit\n\n\n#broom::tidy(nlme_sub_all) |&gt;\n#  knitr::kable(align = \"ccc\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "ebola.html#the-model-proposed-by-pasin2019",
    "href": "ebola.html#the-model-proposed-by-pasin2019",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.9 The model proposed by (Pasin et al. 2019)\n",
    "text": "1.9 The model proposed by (Pasin et al. 2019)\n\nThe non-linear model proposed in (Pasin et al. 2019) based on three compartments, i.e. the SL cells (S), the LL cells (L) and the antibodies (A) writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d}S}{\\text{d}t}\n&\n=\n-\n\\delta_S S\n,\n\\\\\n\\frac{\\text{d}L}{\\text{d}t}\n&\n=\n-\n\\delta_L L\n,\n\\\\\n\\frac{\\text{d}A}{\\text{d}t}\n&\n=\n\\theta_S S\n+\n\\theta_L L\n-\n\\delta_S A\n,\n\\end{split}\n\\end{equation}\n\\tag{1.8}\nwith\n\n\\delta_S representing the decay rate over time of the long-lived (SL) antibody-secreting cells,\n\\theta_S representing the antibodies production rate of SL antibody-secreting cells,\n\\delta_L representing the decay rate over time of the long-lived (LL) antibodies,\n\\theta_L representing the antibodies production rate of LL antibody-secreting cells,\n\\delta_A representing the decay rate of antibodies.\n\nThe equation for the antibodies A is the non-homogeneous linear ordinary differential equation (ODE) given by:\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n=\n\\phi_S\n\\exp{\\left(-\\delta_S t \\right)}\n+\n\\phi_L\n\\exp{\\left( -\\delta_L t \\right)}\n-\n\\delta_A\nA\n,\n\\end{equation}\n\\tag{1.9}\nwith\n\n\\begin{equation}\n\\phi_S = \\theta_S S_0,\n\\quad\nS_0 = S(0)\n,\n\\end{equation}\n\\tag{1.10}\nand \n\\begin{equation}\n\\phi_L = \\theta_L L_0,\n\\quad\nL_0 = L(0)\n,\n\\end{equation}\n\\tag{1.11}\nEquation 1.9 writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+ \\delta_A A\n=\n\\phi_S \\exp(-\\delta_S t)\n+\n\\phi_L \\exp(-\\delta_L t)\n\\end{equation}\n\\tag{1.12}\nor equivalently\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t} + P(t) A = Q(t)\n\\end{equation}\n\\tag{1.13}\nwith:\n\n\nP(t) = \\delta_f (i.e. constant),\n\nQ(t) = \\phi_S \\exp(-\\delta_S t) + \\phi_L \\exp(-\\delta_L t).\n\nThe homogeneous equation writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+\n\\delta_A\nA\n=\n0\n,\n\\end{equation}\n\\tag{1.14}\nwith the solution\n\n\\begin{equation}\nA_h(t)\n=\nc\n\\exp(-\\delta_A t)\n,\n\\end{equation}\n\\tag{1.15}\nwith c a constant determined by the initial conditions (i.e A(0)). The non-homogeneous part can be solved using an integrating factor. Let the integrating factor be\n\n\\begin{equation}\n\\mu(t)\n=\n\\exp{\n\\left(\n\\int \\delta_A \\text{d}t\n\\right)\n}\n=\n\\exp{(\\delta_A t)}\n,\n\\end{equation}\n\\tag{1.16}\nand multiplying by the integrating factor, Equation 1.12 writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d} }{\\text{d}t}\n\\left(\n\\exp(\\delta_f t) f(t)\n\\right)\n&\n=\n\\phi_S\n\\exp\n\\left(\n(\\delta_A - \\delta_S) t\n\\right)\n\\\\\n&\n+\n\\phi_L\n\\exp\n\\left(\n(\\delta_A - \\delta_L) t\n\\right)\n.\n\\end{split}\n\\end{equation}\n\\tag{1.17}\nIntegrating both sides (with respect to t) writes:\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\phi_S\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_S) t \\right)\n}\n\\text{d}t\n\\\\\n&\n+\n\\phi_L\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_L) t \\right)\n}\n\\text{d}t\n.\n\\end{split}\n\\end{equation}\n\\tag{1.18}\nThe first integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n+\nc_1\n,\n\\end{equation}\n\\tag{1.19}\nand the second integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n+\nc_2\n.\n\\end{equation}\n\\tag{1.20}\nPlugging Equation 1.19 and Equation 1.20 in Equation 1.18 writes\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\\\\n&\n+\nc\n.\n\\end{split}\n\\end{equation}\n\\tag{1.21}\nhence\n\n\\begin{equation}\n\\begin{split}\nA(t)\n&\n=\nc\n\\exp(-\\delta_A t)\n\\\\\n&\n+\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp \\left( -\\delta_S t \\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp \\left( -\\delta_L t \\right)\n,\n\\end{split}\n\\end{equation}\n\\tag{1.22}\nwith c a constant determined by the initial condition (i.e. A(0)) plugged-in from the data, i.e. the abelisa value corresponding to the second time instance measurement (i.e. the 7 days corresponding measurement). Assuming the second time instance measurement is A(0) = a, the constant writes\n\n\\begin{equation}\nc\n=\na\n-\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n-\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n.\n\\end{equation}\n\\tag{1.23}\nLet \\bm{\\psi} denote the vector of parameters for the decay rates (LL antibodies, SL antibodies and antibodies) and \\phi_S and \\phi_L\n\n\\begin{equation}\n\\bm{\\psi}=\n\\begin{bmatrix}\n\\phi_S & \\delta_S & \\phi_L & \\delta_L & \\delta_{Ab}\n\\end{bmatrix}\n.\n\\end{equation}\n\\tag{1.24}\nThe following mixed-effect model each parameter \\xi_{k}, with k = 1, \\ldots, 5 is considered:\n\n\\begin{equation}\n\\log{\\left( \\xi_{k}^{i} \\right)}\n=\n\\log{\\left( \\xi_{k0} \\right)}\n+\n\\bm{\\beta}^{T}_{k}\n\\mathbf{z}_{k}^{i}\n+\n\\nu_{k}^{i}\n,\n\\end{equation}\n\\tag{1.25}\nwhere\n\n\\xi^{i}_{k} represents the kth parameters corresponding to the ith subject,\n\\xi_{k0} represents the fixed effect corresponding to the kth element of the parameters vector,\n\\mathbf{z}^{i}_{k} represents the vector of independent variables of the model,\n\\bm{\\beta}_{k} represents the coefficents corresponding to \\mathrm{z}^{i}_{k},\n\n\\nu^{i}_{k} represents the individual effect, assumed to\n\nfollow a centered normal distributed with variance \\omega_{k}^{2}\n\n\n\n\\begin{equation}\n\\nu^{i}_{k}\n\\sim\n\\mathcal N \\left( 0, \\omega_{k}^{2} \\right)\n\\end{equation}\n\\tag{1.26}\n\nbe mutually independent\n\n\n\\begin{equation}\n\\nu^{i}_{k} \\perp \\!\\!\\!\\! \\perp\\nu^{j}_{l}\n\\end{equation}\n\\tag{1.27}\n\n\nThe antibody concentration for patient i at the jth time instance measurement is assumed to be an additional error model\n\n\\begin{equation}\n\\mathrm{y}_{ij}\n=\n\\log_{10}\n\\left(\nA(\\bm{\\psi}^{i},t_{ij})\n\\right)\n+\n\\epsilon_{ij}\n,\n\\end{equation}\n\\tag{1.28}\nwith the noise following a centered normal distributed with the same variance \\omega_{A}^{2} (homoscedasticity), i.e.\n\n\\begin{equation}\n\\epsilon_{ij}\n\\sim\n\\mathcal N \\left( 0, \\sigma_{A}^{2} \\right)\n.\n\\end{equation}\n\\tag{1.29}\nThe complete set of model’s parameters is\n\n\\begin{equation}\n\\bm{\\theta}\n=\n\\begin{bmatrix}\n\\left( \\xi_{k0} \\right)_{k = 1, 5}\n&\n\\left( \\bm{\\beta}_{k} \\right)_{k = 1, 5}\n&\n\\left( \\omega_{k} \\right)_{k = 1, 5}\n&\n\\sigma_{A}\n\\end{bmatrix}\n\\end{equation}\n\\tag{1.30}\nCentering the age in the data:\n\ntb_clean_centered &lt;- tb_clean |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_clean_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_clean_centered\n#   )\n\n\ntb_after_7_centered &lt;- tb_after_7 |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_after_7_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_after_7_centered\n#   )\n\n\n# # consntat corresponding to intial values\n# c_const &lt;- 100\n# \n# # Nonlinear function with log-parameters and fixed c\n# f_model_log &lt;- function(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L) {\n#   phi_S &lt;- exp(log_phi_S)\n#   phi_L &lt;- exp(log_phi_L)\n#   delta_A &lt;- exp(log_delta_A)\n#   delta_S &lt;- exp(log_delta_S)\n#   delta_L &lt;- exp(log_delta_L)\n# \n#   c_const * exp(-delta_A * time) +\n#     (phi_S / (delta_A - delta_S)) * exp(-delta_S * time) +\n#     (phi_L / (delta_A - delta_L)) * exp(-delta_L * time)\n# }\n# \n# # Starting values (log-scale for parameters)\n# start_vals &lt;- c(\n#   log_phi_S = log(50),\n#   log_phi_L = log(30),\n#   log_delta_A = log(0.0005),\n#   log_delta_S = log(0.005),\n#   log_delta_L = log(0.001)\n# )\n# \n# # Fit nlme model:\n# nlme_model &lt;- nlme(\n#   abelisa ~ f_model_log(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L),\n#   \n#   # Data: \n#   data = tb_after_7_centered,\n# \n#   # Fixed effects:\n#   fixed = list(\n#     log_phi_S ~ sex + age_centered + bmi + country,\n#     log_phi_L ~ sex + age_centered + bmi + country,\n#     log_delta_A ~ sex + age_centered + bmi + country,\n#     log_delta_S + log_delta_L ~ 1  # no covariates on delta S and L params\n#   ),\n# \n#   # Random effects on log_phi_S, log_phi_L, per subject\n#   random = pdDiag(log_phi_S + log_phi_L ~ 1 | id),\n# \n#   start = start_vals,\n# \n#   control = nlmeControl(\n#     pnlsTol = 0.1, \n#     msMaxIter = 100, \n#     msMaxEval = 1000\n#   )\n# )\n# \n# summary(nlme_model)\n\n\n\n\n\nPasin, Chloé, Irene Balelli, Thierry Van Effelterre, Viki Bockstal, Laura Solforosi, Mélanie Prague, Macaya Douoguih, and Rodolphe Thiébaut. 2019. “Dynamics of the Humoral Immune Response to a Prime-Boost Ebola Vaccine: Quantification and Sources of Variation.” Edited by Mark T. Heise. Journal of Virology 93 (18). https://doi.org/10.1128/jvi.00579-19.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html",
    "href": "nlme-ab.html",
    "title": "1  Data and exploratory analysis",
    "section": "",
    "text": "1.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and exploratory analysis</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#introduction",
    "href": "nlme-ab.html#introduction",
    "title": "1  Data and exploratory analysis",
    "section": "",
    "text": "1.1.1 Prerequisites\n\nlibrary(tidyverse)  # tidyverse \nlibrary(nlme)       # non-linear mixed effect models\nlibrary(saemix)     # nlme package for saemix objects",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and exploratory analysis</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#exploratory-data-analysis",
    "href": "nlme-ab.html#exploratory-data-analysis",
    "title": "1  Data and exploratory analysis",
    "section": "\n1.2 Exploratory data analysis",
    "text": "1.2 Exploratory data analysis\nReading the csv file and look at its head:\n\nCode# read the csv file\ntb &lt;- read_csv(\"data/data_ebola_ab.csv\")\ntb |&gt;\n  head() |&gt;\n  knitr::kable(align = \"ccccccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\nID\ntime\nsex\nage\nbmi\ncountry\nAbelisa\n\n\n\nID1\n0\nFemale\n35.49993\n20.69408\nWest Africa\n1.785124\n\n\nID1\n7\nFemale\n35.49993\n20.69408\nWest Africa\n4.434470\n\n\nID1\n15\nFemale\n35.49993\n20.69408\nWest Africa\n4.124822\n\n\nID1\n30\nFemale\n35.49993\n20.69408\nWest Africa\n4.050954\n\n\nID1\n90\nFemale\n35.49993\n20.69408\nWest Africa\n3.382073\n\n\nID1\n180\nFemale\n35.49993\n20.69408\nWest Africa\n2.935390\n\n\n\n\n\nCheck the data types (and transform “character” into “factors” if any) and check for missing values.\nTable 1.1 shows the corresponding data types for the variables in the data set. Three variables (ID, sex, country) are categorical variables and will be re-coded as factors.\n\nCode# checking the var types\ntb |&gt;\n  summarise(across(everything(), typeof)) |&gt;\n  knitr::kable(align = \"ccccccc\")\n\n\nTable 1.1: The variable types in the data set\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\ntime\nsex\nage\nbmi\ncountry\nAbelisa\n\n\ncharacter\ndouble\ncharacter\ndouble\ndouble\ncharacter\ndouble\n\n\n\n\n\n\n\nTable 1.2 shows the number of missing values for each variable in the data set. There are no missing values.\n\nCode# checking for possible missing vals\ntb |&gt;\n  summarise(across(everything(), \\(x) sum(is.na(x)))) |&gt;\n  knitr::kable(align = \"ccccccc\")\n\n\nTable 1.2: The number of missing values in each variable\n\n\n\n\nID\ntime\nsex\nage\nbmi\ncountry\nAbelisa\n\n\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nTwo pre-processing operations should be done:\n\ncleaning the names (not essential but for consistency we adhere to the tidy design principles),\ntransforming the “character” variables into “factors” (when important, the ordering of factors should be accounted for; here the sex and country variables are not ordered factors; the ID variable might be ordered for visualizations reasons if necessary).\n\nThe following chunk is doing the pre-processing as mentioned above and checks the correctness of the pre-processing.\n\nCodetb &lt;- tb |&gt;\n  # clean the names\n  janitor::clean_names() |&gt;\n  # transform chr into factors\n  mutate(across(where(is.character), fct))\n\n# check the transformed tibble\ntb |&gt;\n  glimpse()\n#&gt; Rows: 360\n#&gt; Columns: 7\n#&gt; $ id      &lt;fct&gt; ID1, ID1, ID1, ID1, ID1, ID1, ID1, ID1, ID2, ID2, ID2, ID2, ID…\n#&gt; $ time    &lt;dbl&gt; 0, 7, 15, 30, 90, 180, 365, 730, 0, 7, 15, 30, 90, 180, 365, 7…\n#&gt; $ sex     &lt;fct&gt; Female, Female, Female, Female, Female, Female, Female, Female…\n#&gt; $ age     &lt;dbl&gt; 35.49993, 35.49993, 35.49993, 35.49993, 35.49993, 35.49993, 35…\n#&gt; $ bmi     &lt;dbl&gt; 20.69408, 20.69408, 20.69408, 20.69408, 20.69408, 20.69408, 20…\n#&gt; $ country &lt;fct&gt; West Africa, West Africa, West Africa, West Africa, West Afric…\n#&gt; $ abelisa &lt;dbl&gt; 1.785124, 4.434471, 4.124822, 4.050954, 3.382073, 2.935390, 2.…\n\n\nThe tibbles now has factor variables & tidy names. The next chunk is looking at the number of unique values in factor variables (i.e. the support of the categorical variables). Table 1.3 shows the number of unique values in factor variables.\n\nCode# tb |&gt;\n#   summarise(across(where(is.factor), \\(x) length(unique(x))))\n\ntb |&gt;\n  summarise(across(where(is.factor), n_distinct)) |&gt;\n  knitr::kable(align = \"ccc\")\n\n\nTable 1.3: The corresponding number of levels for the factor variables\n\n\n\n\nid\nsex\ncountry\n\n\n45\n2\n3\n\n\n\n\n\n\n\nFor the factor variables in the tibble:\n\n45 levels for id factor variable.\n2 levels for sex factor variable.\n3 levels for country factor variable.\n\nThe next subsections are looking at the factor variables. The goal is to have an idea about possible inbalances between levels and to have some visual inspection of their distributions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and exploratory analysis</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#the-factor-variables",
    "href": "nlme-ab.html#the-factor-variables",
    "title": "1  Data and exploratory analysis",
    "section": "\n1.3 The factor variables",
    "text": "1.3 The factor variables\n\n1.3.1 The id variable\nThe following chunk is computing the counts and proportions of the id’s variable levels.\n\nCodetb_id_levels_number &lt;- tb |&gt;\n  summarise(\n    n = n(),\n    .by = id\n  ) |&gt;\n  mutate(\n    prop = n / sum(n),\n  )\n\n\nTable 1.4 shows the head of the summarized data, showing the corresponding counts (representing the number of measurements/observations) for each level in the id variable and Figure 1.1 shows a visualisation of the id variable level’s counts.\n\nCodetb_id_levels_number |&gt;\n  head() |&gt;\n  knitr::kable(align = \"ccc\")\n\n\nTable 1.4: The number of observations for each level corresponding to id variable\n\n\n\n\nid\nn\nprop\n\n\n\nID1\n8\n0.0222222\n\n\nID2\n8\n0.0222222\n\n\nID3\n8\n0.0222222\n\n\nID4\n8\n0.0222222\n\n\nID5\n8\n0.0222222\n\n\nID6\n8\n0.0222222\n\n\n\n\n\n\n\n\n\nCodetb_id_levels_number |&gt;\n  ggplot(aes(x = id, y = n)) +\n  geom_point(size = 3, color = \"tomato\") +\n  geom_segment(aes(x = id, xend = id, y = 0, yend = n), color = \"tomato\") +\n  labs(\n    title = \"Number of observations of the ID levels\",\n    subtitle = \"Each subject appears with 8 measurements in the data\",\n    x = \"Subject's ID\",\n    y = \"Number of observations\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.1: The number of observations for each level corresponding to id variable\n\n\n\n\nIt seems that each id level has the same number of counts for each level, i.e. it seems that there are preciselsy 8 observations for every subject in the data set. This can be checked by looking at the complete tibble given its small size but in general it can be checked by computing the number of distinct values in counts variable (n) in the summarized data. The following codes does exactly this:\n\nCodetb_id_levels_number |&gt;\n  select(n) |&gt;\n  n_distinct() == TRUE\n#&gt; [1] TRUE\n\n\nThere is only one numerical value (8 in this case) corresponding to the ID counts for each level. Hence, it can be concluded that\n\n\n\n\n\n\nThe number of observations (measurements) is the same across the subjects (8 observations), i.e. there are no missing or additional measurements for any subject in the data set.\n\n\n\n\nCoden_obs_per_subject &lt;- tb_id_levels_number |&gt;\n  pull(n) |&gt;\n  unique()\n# n_obs_per_subject\n\n\n\n1.3.2 The sex variable\nThe following chunk is looking at the counts and proportion of the sex’s variable levels.\n\nCodetb_sex_levels_number &lt;- tb |&gt;\n  summarise(\n    n_obs = n(),\n    .by = sex\n  ) |&gt;\n  mutate(\n    n_subjects = n_obs / n_obs_per_subject,\n    prop = n_subjects / sum(n_subjects),\n  )\n\n\nTable 1.5 shows the number of subjects for each sex’s variable level and their corresponding proportion in the data set. Figure 1.2 shows a bar plot visualisation of the proportions.\n\nCodetb_sex_levels_number |&gt;\n  knitr::kable(align = \"cccc\")\n\n\nTable 1.5: The number of subjects for each sex level and their corresponding proportion in the data set.\n\n\n\n\nsex\nn_obs\nn_subjects\nprop\n\n\n\nFemale\n168\n21\n0.4666667\n\n\nMale\n192\n24\n0.5333333\n\n\n\n\n\n\n\n\n\nCodetb |&gt;\n  ggplot(aes(x = sex, y = after_stat(prop), group = 1)) +\n  geom_bar(fill = \"tomato\") +\n  labs(\n    title = \"Proportion of the sex levels in the data\",\n    x = \"Subject's sex\",\n    y = \"Proportion\"\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.2: The proportion of the sex levels in the data.\n\n\n\n\nThe counts and proportions for the levels corresponding to the sex variable are:\n\n“Female” level: 21 subjects, representing 0.47% of the data,\n“Male” level: 24 subjects, representing 0.53% of the data.\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe data is fairly balanced between the sex’s variable levels.\n\n\n\n\n1.3.3 The country variable\nThe following chunk is looking at the counts and proportion of the country’s variable levels:\n\nCodetb_country_levels_number &lt;- tb |&gt;\n  summarise(\n    n_obs = n(),\n    .by = country\n  ) |&gt;\n  mutate(\n    n_subjects = n_obs / n_obs_per_subject,\n    prop = n_subjects / sum(n_subjects),\n  )\n\n\nTable 1.6 shows the number of subjects for each country’s variable levels and their corresponding proportion in the data set. Figure 1.3 shows a bar plot visualisation of the proportions.\n\nCodetb_country_levels_number |&gt;\n  knitr::kable(align = \"ccc\")\n\n\nTable 1.6: The number of subjects for each country level and their corresponding proportion in the data set.\n\n\n\n\ncountry\nn_obs\nn_subjects\nprop\n\n\n\nWest Africa\n120\n15\n0.3333333\n\n\nEast Africa\n96\n12\n0.2666667\n\n\nEurope\n144\n18\n0.4000000\n\n\n\n\n\n\n\n\n\nCodetb |&gt;\n  ggplot(aes(x = country,  y = after_stat(prop), group = 1)) +\n  geom_bar(fill = \"tomato\") +\n  labs(\n    title = \"Proportion of the country levels in the data\",\n    x = \"Subjects's country\",\n    y = \"Proportion\"\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.3: The proportion of the country levels in the data.\n\n\n\n\nThe counts and proportions for the levels corresponding to the country variable are:\n\n“West Africa” level: 15 observations, representing 0.33% of the data,\n“East Africa” level: 12 observations, representing 0.27% of the data,\n“Europe” level: 18 observations, representing 0.4% of the data.\n\n\n\n\n\n\n\nThe data is fairly balanced between the country levels.\n\n\n\nThe following chunk is looking at the proportion of the sex’s variable levels in each country’s variable levels.\nTable 1.7 shows the results & Figure 1.4 a bar plot visualisation.\n\nCodetb |&gt;\n  summarise(\n    n_subjects = n() / n_obs_per_subject,\n    .by = c(country, sex)\n  ) |&gt;\n  arrange(country, sex) |&gt;\n  group_by(country) |&gt;\n  mutate(prop_across_regions = n_subjects / sum(n_subjects)) |&gt;\n  ungroup() |&gt;\n  mutate(prop = n_subjects / sum(n_subjects)) |&gt;\n  knitr::kable(align = \"cccccc\")\n\n\nTable 1.7: The number of subjects for each sex - country pair corresponding levels and their corresponding proportion in the data set.\n\n\n\n\ncountry\nsex\nn_subjects\nprop_across_regions\nprop\n\n\n\nWest Africa\nFemale\n9\n0.6000000\n0.2000000\n\n\nWest Africa\nMale\n6\n0.4000000\n0.1333333\n\n\nEast Africa\nFemale\n5\n0.4166667\n0.1111111\n\n\nEast Africa\nMale\n7\n0.5833333\n0.1555556\n\n\nEurope\nFemale\n7\n0.3888889\n0.1555556\n\n\nEurope\nMale\n11\n0.6111111\n0.2444444\n\n\n\n\n\n\n\n\n\nCodetb |&gt;\n  ggplot(aes(x = country, fill = sex)) +\n  geom_bar(position = \"fill\") +\n  labs(\n    title = \"Proportion of sex for each region\",\n    x = \"Patient's country\",\n    y = \"Counts\", \n    fill = NULL\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n  ) \n\n\n\n\n\n\nFigure 1.4: The proportion of the sex’s levels in country’s levels",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and exploratory analysis</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#the-numerical-variables",
    "href": "nlme-ab.html#the-numerical-variables",
    "title": "1  Data and exploratory analysis",
    "section": "\n1.4 The numerical variables",
    "text": "1.4 The numerical variables\n\n1.4.1 The time variable\nThe id variable analysis showed that for each subject (i.e. for each level of the id variable) exactly 8 measurements – taken at different times – are available. For the time variable, we check if the corresponding measurement times for each subject are the same (i.e. if for each subject in the data set the 8 measurements are taken at the same time instances). Because of the small size of the data set, we can get and idea if this is true by looking at the plot of measurement times for each ID, Figure 1.5. (Plot done using log(times) for a better visualization).\n\nCodetb |&gt;\n  ggplot(aes(x = id, y = log(time))) +\n  geom_point(color = \"tomato\") +\n  labs(\n    title = \"Measurment times\",\n    x = \"Patient's ID\",\n    y = \"Log Time (days)\", \n  ) +\n  scale_y_continuous(breaks = seq(-2, 7, by = 2)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.5: The times of measurements for each subject in the data set.\n\n\n\n\nThis can be checked rigorously via pivot_wider, pivoting the measurement times wider and checking if the value is unique in each time column. The next chunk is doing this.\n\nCodetb |&gt;\n  select(id, time) |&gt;\n  # pivot the tibble wider and get the time measurements \n  pivot_wider(\n    names_from = time,\n    names_prefix = \"t_\",\n    values_from = time\n    ) |&gt;\n  summarise(\n    across(starts_with(\"t_\"), n_distinct)\n  ) |&gt;\n  knitr::kable(align = \"ccccccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\nt_0\nt_7\nt_15\nt_30\nt_90\nt_180\nt_365\nt_730\n\n\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe corresponding measurement times for each subject are taken the same time instances.\n\n\n\nFor all subjects in the data set, the measurements are taken at 0, 7, 15, 30, 90, 180, 365, 730 days.\n\n1.4.2 The age variable\nThe following chunk is computing the density of age variable, showed in Figure 1.6.\n\nCodetb |&gt;\n  ggplot(aes(x = age)) +\n  geom_density(color = \"tomato\", fill = \"tomato\", alpha = .5) +\n  labs(\n    title = \"Age density\",\n    x = \"Age (years)\",\n    y = \"Density\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.6: The density of age variable.\n\n\n\n\nThe age variable seems to contain negative values. The following chunk filters the tibble for negative age values, showed in Table 1.8\n\nCodetb_negative_age &lt;- tb |&gt;\n  filter(age &lt; 0) |&gt;\n  distinct(id, age)\n\ntb_negative_age |&gt;\n  knitr::kable(align = \"cc\")\n\n\nTable 1.8: The subjects correponding ID’s values for negative age values\n\n\n\n\nid\nage\n\n\n\nID27\n-3.191009\n\n\nID33\n-12.318307\n\n\n\n\n\n\n\n\nThere are two subjects with corresponding negative ages:\n\nsubject ID27 which has the recorded corresponding age -3.19,\nsubject ID33 which has the recorded corresponding age -12.32.\n\n\n\n\n\n\n\nThe subjects appearing with negative age in the data are dropped.\n\n\n\nThe following chunks drops the subjects with corresponds negative age.\n\nCodetb_clean &lt;- tb |&gt;\n  filter(age &gt;= 0)\n\n\nThe conditional distributions of the age variable given the sex variable’s levels are fairly close to each other, Figure 1.7. This is not the case for the conditional distributions of the age variable given the country variable’s levels: the age distribution for subjects from “West Africa” is significant different from the age distribution for subjects from “East Africa” and “Europe”. (This is not very significant though, accounting for the small number of subjects, Table 1.6.)\nCodetb_clean |&gt;\n  ggplot(aes(x = age, color = sex, fill = sex)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Age densities for sex levels\",\n    x = \"Age (year)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  ) \n\n\ntb_clean |&gt;\n  ggplot(aes(x = age, color = country, fill = country)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Age densities for region levels\",\n    x = \"Age (years)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  ) \n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.7: The conditional distribution of age given sex and country variables.\n\n\nIn this case, looking at the median, IQR and range is more sensible. Table 1.9 and Table 1.10 are showing the min, median, IQR and max for the age variable conditional on sex and country levels, respectively. The corresponding boxplots are showed in Figure 1.8.\n\nCode\ntb_clean |&gt;\n  summarise(\n    min = min(age),\n    median = median(age),\n    IQR = IQR(age), \n    max = max(age),\n    .by = sex\n  ) |&gt;\n  knitr::kable(align = \"ccccc\")\n\n\nTable 1.9: The min, median, IQR and max for the age variable conditional on sex variable’s levels.\n\n\n\n\nsex\nmin\nmedian\nIQR\nmax\n\n\n\nFemale\n16.95602\n47.08783\n23.23231\n79.14763\n\n\nMale\n2.96366\n44.15401\n30.09295\n80.64180\n\n\n\n\n\n\n\n\n\nCodetb_clean |&gt;\n  summarise(\n    min = min(age),    \n    median = median(age),\n    IQR = IQR(age), \n    max = max(age),\n    .by = country\n  )  |&gt;\n  knitr::kable(align = \"ccccc\")\n\n\nTable 1.10: The min, median, IQR and max for the age variable conditional on country variable’s levels.\n\n\n\n\ncountry\nmin\nmedian\nIQR\nmax\n\n\n\nWest Africa\n24.11422\n39.29298\n21.17336\n80.64180\n\n\nEast Africa\n2.96366\n50.63353\n37.34947\n68.56830\n\n\nEurope\n16.95602\n48.08937\n32.51637\n79.14763\n\n\n\n\n\n\n\n\nCodetb_clean |&gt;\n  ggplot(aes(y = age, x = sex, fill = sex)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Age for sex levels\",\n    x = \"Sex\",\n    y = \"Age (years)\"\n  )  +\n  theme_bw()\n\ntb_clean |&gt;\n  ggplot(aes(y = age, x = country, fill = country)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Age for region levels\",\n    x = \"Region\",\n    y = \"Age (years)\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.8: The boxplot of age variable given sex and country variables.\n\n\nAnother thing that should be checked about age variable is the following: it seems the variable rather indicates the subject’s age at the beginning of the experiment and it does not increment during the experiment, i.e. it does not account for the time passed between measurements. This can be checked by looking at the distinct values of id and age in the data set:\n\nCodetb_clean |&gt;\n  nrow() / n_obs_per_subject == tb_clean |&gt;\n  distinct(id, age) |&gt;\n  nrow()\n#&gt; [1] TRUE\n\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe age variable represents the subject’s age at the beginning of the experiment and it is not accounting for the time between measurements.\n\n\n\nAnother variable age_updated that represents the subject’s age at the time of each measurement is added to the tibble in case the analysis requires to take in account the age at the corresponding time instance of the measurement. The next chunk does this.\n\nCodetb_clean &lt;- tb_clean |&gt;\n  mutate(age_updated = age + time / 365) |&gt;\n  relocate(age_updated, .after = age)\n\ntb_clean |&gt;\n  head() |&gt;\n  knitr::kable(align = \"cccccccc\")\n#&gt; Warning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n#&gt; Warning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\n#&gt; Use 'xfun::attr2()' instead.\n#&gt; See help(\"Deprecated\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ntime\nsex\nage\nage_updated\nbmi\ncountry\nabelisa\n\n\n\nID1\n0\nFemale\n35.49993\n35.49993\n20.69408\nWest Africa\n1.785124\n\n\nID1\n7\nFemale\n35.49993\n35.51911\n20.69408\nWest Africa\n4.434470\n\n\nID1\n15\nFemale\n35.49993\n35.54103\n20.69408\nWest Africa\n4.124822\n\n\nID1\n30\nFemale\n35.49993\n35.58213\n20.69408\nWest Africa\n4.050954\n\n\nID1\n90\nFemale\n35.49993\n35.74651\n20.69408\nWest Africa\n3.382073\n\n\nID1\n180\nFemale\n35.49993\n35.99308\n20.69408\nWest Africa\n2.935390\n\n\n\n\n\n\n1.4.3 The bmi variable\nAcounting for the fact that the age variable does not represent the age at the time of each measurement but rather the subject’s age at the beginning of the experiment, we start by checking if the bmi variable has the same interpretation, i.e. if it simply indicates the subject’s body mass index at the start of the experiment and it does not capture the subject’s BMI variation during the experiment:\n\nCodetb_clean |&gt;\n  nrow() / n_obs_per_subject == tb_clean |&gt;\n  distinct(id, bmi) |&gt;\n  nrow()\n#&gt; [1] TRUE\n\n\nHence, it can be concluded that\n\n\n\n\n\n\nThe bmi variable represents the subject’s BMI at the beginning of the experiment and it is not accounting for the BMI variations during the experiment.\n\n\n\nAs before, we look at the density of bmi variable. The next chunk computes the denisty, showed in Figure 1.9.\n\nCodetb_clean |&gt;\n  ggplot(aes(x = bmi)) +\n  geom_density(color = \"tomato\", fill = \"tomato\", alpha = .5) +\n  labs(\n    title = \"BMI density\",\n    x = \"BMI (kg/m²)\",\n    y = \"Density\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.9: The density of bmi variable.\n\n\n\n\nThe conditional densities and conditional boxplots (conditional on the categorical variables sex and country) are showed in Figure 1.10 and Figure 1.11.\nCode\n\ntb_clean |&gt;\n  ggplot(aes(x = bmi, color = sex, fill = sex)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"BMI densities for sex levels\",\n    x = \"BMI (kg/m²)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  ) \n\ntb_clean |&gt;\n  ggplot(aes(x = bmi, color = country, fill = country)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"BMI densities for region levels\",\n    x = \"BMI (kg/m²)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.10: The densities of bmi variable given sex and country variables.\n\n\nCodetb_clean |&gt;\n  ggplot(aes(y = bmi, x = sex, fill = sex)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"BMI for sex levels\",\n    x = \"Sex\",\n    y = \"BMI (kg/m²)\"\n  )  +\n  theme_bw()\n\ntb_clean |&gt;\n  ggplot(aes(y = bmi, x = country, fill = country)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"BMI for region levels\",\n    x = \"Region\",\n    y = \"BMI (kg/m²)\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.11: The boxplots of bmi variable given sex and country variables.\n\n\n\n1.4.4 The abelisa variable\nAs before, we look at the density of abelisa variable. The next chunk computes the denisty, showed in Figure 1.12,\n\nCodetb_clean |&gt;\n  ggplot(aes(x = abelisa)) +\n  geom_density(color = \"tomato\", fill = \"tomato\", alpha = .5) +\n  labs(\n    title = \"Antibody concentration density\",\n    x = \"Antibody concentration (EU/mL)\",\n    y = \"Density\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.12: The density of abelisa variable.\n\n\n\n\nthe conditional densities are showed in Figure 1.13\nCodetb_clean |&gt;\n  ggplot(aes(x = abelisa, color = sex, fill = sex)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Antibody conc. densities for sex levels\",\n    x = \"Antibody conc. (EU/mL)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\ntb_clean |&gt;\n  ggplot(aes(x = abelisa, color = country, fill = country)) +\n  geom_density(alpha = .5) +\n  labs(\n    title = \"Antibody conc. densities for region levels\",\n    x = \"Antibody conc. (EU/mL)\",\n    y = \"Density\",\n    color = NULL,\n    fill = NULL\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.13: The density of abelisa variable given sex and country variables.\n\n\nand the conditional boxplots are showed in Figure 1.14\nCodetb_clean |&gt;\n  ggplot(aes(y = abelisa, x = sex, fill = sex)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Antibody concentration for sex levels\",\n    x = \"Sex\",\n    y = \"Antibody conc. (EU/mL)\"\n  )  +\n  theme_bw()\n\ntb_clean |&gt;\n  ggplot(aes(y = abelisa, x = country, fill = country)) +\n  geom_boxplot(alpha = .5, show.legend = FALSE) +\n  labs(\n    title = \"Antibody concentration for region levels\",\n    x = \"Region\",\n    y = \"Antibody conc. (EU/mL)\"\n  )  +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.14: The boxplot of abelisa variable given sex and country variables.\n\n\nThe next chunk computes the antibody concentration during time for all subjects in the data frame and it’s log version, showed in Figure 1.15.\nCodetb_clean |&gt;\n  ggplot(aes(x = time, y = abelisa, color = bmi, group = id)) +\n  geom_line() +\n  scale_color_distiller(palette = \"RdPu\") +\n  labs(\n    title = \"Antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\ntb_clean |&gt;\n  ggplot(aes(x = time, y = log(abelisa), color = bmi, group = id)) +\n  geom_line() +\n  scale_color_distiller(palette = \"RdPu\") +\n  labs(\n    title = \"Antibody concentration during time\",\n    x = \"log(Time) (days)\",\n    y = \"log(Antibody conc.) (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.15: The antibody concentration during time for all subjects.\n\n\nThe next chunk computes the average antibody concentration during time (based on the subjects in the data frame) and it’s log version, showed in Figure 1.16.\nCodetb_clean |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  ggplot(aes(x = time, y = mean_abelisa)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    title = \"Average antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\ntb_clean |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  ggplot(aes(x = time, y = log(mean_abelisa))) +\n  geom_line(color = \"tomato\") +\n  labs(\n    title = \"Average antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.16: The average antibody concentration during time.\n\n\nThe next chunk computes the antibody concentration during time for all subjects, for all levels of country and sex variables, showed in Figure 1.17.\n\nCodetb_clean |&gt;\n  ggplot(aes(x = time, y = abelisa, color = bmi, group = id)) +\n  geom_line() +\n  facet_grid(sex ~ country) +\n  scale_color_distiller(palette = \"RdPu\") +\n  labs(\n    title = \"Antibody concentration during time\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\nFigure 1.17: The antibody concentration during time for all subjects, for all levels of country and sex variables\n\n\n\n\nThe next chunk computes the antibody concentration during time for all subjects, individually, showed in Figure 1.18 (for clarity, title and axis names are removed).\n\nCodetb_clean |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_line(color = \"tomato\") +\n  facet_wrap(~ id) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.18: The antibody concentration during time for all subjects, for all levels of country and sex variables\n\n\n\n\nThe two aspects that are apparent in Figure 1.15, Figure 1.17 and fig-abelisa-all-per-subject are the following:\n\nA similar behavior (pattern) of the concentration levels during time (i.e. a very sudden increase followed by a slow decrease).\nVariation in behavior between subjects: the amplitude of the initial spike varies, the rate of decrease varies. This variation is (partially) explained by the subject particular physiology.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and exploratory analysis</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#an-approximation-function",
    "href": "nlme-ab.html#an-approximation-function",
    "title": "1  Data and exploratory analysis",
    "section": "\n1.5 An approximation function",
    "text": "1.5 An approximation function\nThe goal here is to find the analytical form of a exponential functional that can model the behavior of the antibody concentration during time.\nImportantly, the behavior will be considered starting with day 7, which effectively means the exclusion of the the first (time) measurement for each subject in the data frame.\n\ntb_after_7 &lt;- tb_clean |&gt;\n  filter(time != 0)\n\nThe antibody concentration is decreasing exponential and (apparently) platoes the following function is considered to model the antibody concentration:\n\n\\begin{equation}\nf(t)\n=\n\\phi_1\n+\n\\left(\n\\phi_2 - \\phi_1\n\\right)\n\\exp(- \\phi_3 t)\n\\end{equation}\n\\tag{1.1}\nThe parameters are computed in the following chunk:\n\nrange_abelisa_average &lt;- tb_after_7 |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  pull(mean_abelisa) |&gt;\n  range()\nrange_abelisa_average\n#&gt; [1] 2.752019 4.096533\n\nrange_time &lt;- tb_after_7 |&gt;\n  pull(time) |&gt;\n  range()\nrange_time\n#&gt; [1]   7 730\n\n\nf_approx &lt;- function(psi, time){\n  y_min &lt;- psi[1]\n  y_max &lt;- psi[2]\n  rate &lt;- psi[3]\n  return(y_min + (y_max - y_min) * exp(-rate * time)) \n}\n\n\ntime &lt;- seq(range_time[1], range_time[2], 1)\n\n#psi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.007)\npsi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.0065)\n\n\ntb_f_approx &lt;- tibble(\n  time  = time,\n  f = f_approx(psi_vals, time)\n)\n\ntb_f_approx\n#&gt; # A tibble: 724 × 2\n#&gt;    time     f\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     7  4.04\n#&gt; 2     8  4.03\n#&gt; 3     9  4.02\n#&gt; 4    10  4.01\n#&gt; 5    11  4.00\n#&gt; 6    12  4.00\n#&gt; # ℹ 718 more rows\n\nCodetb_after_7 |&gt;\n  ggplot() +\n  geom_point(aes(x = time, y = abelisa, group = id), color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration vs. approx. func.\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\ntb_after_7 |&gt;\n  summarise(\n    mean_abelisa = mean(abelisa),\n    .by = time\n  ) |&gt;\n  ggplot(aes(x = time, y = mean_abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Average antibody conc. vs. approx func.\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1.19: Antibody concentration vs. approximation function",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and exploratory analysis</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#non-linear-nl-model",
    "href": "nlme-ab.html#non-linear-nl-model",
    "title": "1  Data and exploratory analysis",
    "section": "\n1.6 Non-linear (NL) model",
    "text": "1.6 Non-linear (NL) model\nIn the following,\n\n\nm denotes the number of subjects,\n\nn denotes the number of measurements (in this case the concentration measurements) for each subject taken at different time instants.\n\nThe measurement corresponding to ith patient at the jth time instant is denoted by y_{ij}, with\n\n\ni = 1, \\ldots, m, (in this case m = 43, accounting for the removed data with corresponding negative ages)\n\nj = 1, \\ldots, n (in this case n = 8).\n\ny_{ij} is viewed as the dependent variable (in this case the abelisa variable representing the antibody concentration) of a non-linear model, writing\n\n\\begin{equation}\n\\begin{split}\ny_{ij}\n=\nf(\\bm{\\psi}, t_j)\n+\n\\epsilon_{ij}\n,\n\\end{split}\n\\end{equation}\n\\tag{1.2}\nwhere\n\n\nf represents a non-linear model,\n\nt_j represents the jth time instant,\n\n\\bm{\\psi} represents the parameters vector,\n\n\\epsilon_{ij} accounts for the modeling error and uncertainty.\n\n\n1.6.1 One subject\nBefore considering the model Equation 1.2 accounting for all subjects, a single subject is considered. For illustration, Figure 1.20 shows the evolution of the antibody concentration during time for subject ID1.\n\nCodetb_after_7 |&gt;\n  filter(id == \"ID1\") |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") + \n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration during time for subject ID1\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.20: The antibody concentration during time for subject ID1\n\n\n\n\nIn this case, the model writes\n\n\\begin{equation}\n\\begin{split}\ny_{j} = f(\\bm{\\psi}, t_j) + \\epsilon_j,\n\\end{split}\n\\end{equation}\n\\tag{1.3}\ni.e. the subject’s index i is dropped and the only measurement variation is due to the measurement timing, with the least-squares estimate given by\n\n\\begin{equation}\n\\begin{split}\n\\widehat{\\bm{\\psi}}\n=\n\\arg\\min_{\\bm{\\psi}}\n\\sum_{j=1}^{n}\n\\left(\ny_j\n-\nf(\\bm{\\psi}, t_j)\n\\right)^2\n\\end{split}\n\\end{equation}\n\\tag{1.4}\nwith\n\n\\begin{equation}\n\\begin{split}\n\\bm{\\psi}\n=\n\\begin{bmatrix}\n\\phi_1 & \\phi_2 & \\phi_3\n\\end{bmatrix}\n.\n\\end{split}\n\\end{equation}\n\\tag{1.5}\n\nCodenls_sub_1 &lt;- nls(\n  abelisa ~ f_approx(psi, time),\n  data = tb_after_7 |&gt; filter(id == \"ID1\"),\n  start = list(psi = psi_vals)\n  )\n\nnls_sub_1\n#&gt; Nonlinear regression model\n#&gt;   model: abelisa ~ f_approx(psi, time)\n#&gt;    data: filter(tb_after_7, id == \"ID1\")\n#&gt;     psi1     psi2     psi3 \n#&gt; 2.369908 4.441104 0.007356 \n#&gt;  residual sum-of-squares: 0.03733\n#&gt; \n#&gt; Number of iterations to convergence: 6 \n#&gt; Achieved convergence tolerance: 6.02e-06\n\nbroom::tidy(nls_sub_1) |&gt;\n  knitr::kable(align = \"ccc\")\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\npsi1\n2.3699077\n0.0878109\n26.988771\n0.0000112\n\n\npsi2\n4.4411042\n0.0762377\n58.253396\n0.0000005\n\n\npsi3\n0.0073556\n0.0010835\n6.788539\n0.0024586\n\n\n\n\n\n\nCodetb_sub_1_pred &lt;- tb_f_approx |&gt;\n  mutate(\n  prediction = predict(nls_sub_1, newdata = tb_f_approx)  \n  )\ntb_sub_1_pred\n#&gt; # A tibble: 724 × 3\n#&gt;    time     f prediction\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1     7  4.04       4.34\n#&gt; 2     8  4.03       4.32\n#&gt; 3     9  4.02       4.31\n#&gt; 4    10  4.01       4.29\n#&gt; 5    11  4.00       4.28\n#&gt; 6    12  4.00       4.27\n#&gt; # ℹ 718 more rows\n\n\n\nCodetb_after_7 |&gt;\n  filter(id == \"ID1\") |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_sub_1_pred\n    ) +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_1_pred\n    ) +\n  labs(\n    title = \"Antibody concentration vs. NLM pred\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.21: The antibody concentration during time for subject ID1 vs. approximation function (green) vs. NLM prediction (blue)\n\n\n\n\n\n1.6.2 Multiple subjects\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_f_approx\n    ) +\n  labs(\n    title = \"Antibody concentration during time for all subjects\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.22: The antibody concentration during time for all subjects vs. approximation function\n\n\n\n\nThe model for multiple subjects is given by Equation 1.2 and the LS estimate is given by\n\n\\begin{equation}\n\\begin{split}\n\\widehat{\\bm{\\psi}}\n=\n\\arg\\min_{\\bm{\\psi}}\n\\sum_{i=1}^{m}\n\\sum_{j=1}^{n}\n\\left(\ny_{ij}\n-\nf(\\bm{\\psi}, t_j)\n\\right)^2\n\\end{split}\n\\end{equation}\n\\tag{1.6}\n\nCodenls_sub_all &lt;- nls(\n  abelisa ~ f_approx(psi, time),\n  data = tb_after_7,\n  start = list(psi = psi_vals)\n  )\n\nnls_sub_all\n#&gt; Nonlinear regression model\n#&gt;   model: abelisa ~ f_approx(psi, time)\n#&gt;    data: tb_after_7\n#&gt;     psi1     psi2     psi3 \n#&gt; 2.743720 4.247855 0.009601 \n#&gt;  residual sum-of-squares: 35.42\n#&gt; \n#&gt; Number of iterations to convergence: 4 \n#&gt; Achieved convergence tolerance: 2.578e-06\n\nbroom::tidy(nls_sub_all) |&gt;\n  knitr::kable(align = \"ccc\")\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\npsi1\n2.7437203\n0.0419748\n65.365923\n0\n\n\npsi2\n4.2478547\n0.0451069\n94.173147\n0\n\n\npsi3\n0.0096014\n0.0010454\n9.184298\n0\n\n\n\n\n\n\nCodetb_sub_all_pred &lt;- tb_f_approx |&gt;\n  mutate(\n  prediction = predict(nls_sub_all, newdata = tb_f_approx)  \n  )\n# tb_sub_all_pred\n\n\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = f), \n    color = \"darkseagreen\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  labs(\n    title = \"Antibody concentration vs. NLM pred\",\n    x = \"Time (days)\",\n    y = \"Antibody conc. (EU/mL)\",\n    color = \"BMI\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.23: The antibody concentration during time for all subjects and vs. approximation function (green) vs. NLM prediction (blue)\n\n\n\n\n\nCodetb_after_7 |&gt;\n  ggplot(aes(x = time, y = abelisa)) +\n  geom_point(color = \"tomato\") +\n  geom_line(\n    aes(x = time, y = prediction), \n    color = \"lightblue\",\n    linewidth = 1.5,\n    data = tb_sub_all_pred\n    ) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\nFigure 1.24: The antibody concentration during time for all subjects and the NLM prediction\n\n\n\n\n\n1.6.3 Multiple models fitted on multiple subjects\n\nCoden_subjects &lt;- tb_after_7 |&gt;\n  pull(id) |&gt;\n  n_distinct()\n\navailable_ids_vec &lt;- tb_after_7 |&gt;\n  pull(id) |&gt;\n  unique() |&gt;\n  as.character() |&gt;\n  parse_number()\n\nsub_indiv &lt;- tibble()\n\nset.seed(43)\n\npsi_vals &lt;- c(range_abelisa_average[1], range_abelisa_average[2], 0.0065)\n\nfor(i in available_ids_vec){\n  nls_sub_i &lt;- nls(\n    abelisa ~ f_approx(psi, time),\n    data = tb_after_7 |&gt; filter(id == str_c(\"ID\", i)),\n    start = list(psi = psi_vals)\n    )  \n  \n  tb_sub_i_pred &lt;- tibble(\n    time = time,\n    id = rep(str_c(\"ID\", i), length(time))\n    ) \n  \n  tb_sub_i_pred &lt;- tb_sub_i_pred |&gt;\n    mutate(pred = predict(nls_sub_i, newdata = tb_sub_i_pred))\n  \n  sub_indiv &lt;- bind_rows(sub_indiv, tb_sub_i_pred)\n  }\n\nsub_indiv &lt;- sub_indiv |&gt;\n  relocate(id, .before = time) |&gt;\n  mutate(\n    id = factor(id, ordered = TRUE)\n  )\nsub_indiv\n#&gt; # A tibble: 31,132 × 3\n#&gt;   id     time  pred\n#&gt;   &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 ID1       7  4.34\n#&gt; 2 ID1       8  4.32\n#&gt; 3 ID1       9  4.31\n#&gt; 4 ID1      10  4.29\n#&gt; 5 ID1      11  4.28\n#&gt; 6 ID1      12  4.27\n#&gt; # ℹ 31,126 more rows\n\n\n\nCodetb_after_7 |&gt;\n  ggplot() +\n  geom_point(\n    aes(x = time, y = abelisa, group = id),\n    color = \"tomato\",\n    size = 2\n  ) +\n  geom_line(\n    data = sub_indiv,\n    aes(x = time, y = pred, group = id),\n    color = \"darkseagreen\",\n    linewidth = 1\n  ) +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL,\n    color = NULL\n  ) +\n  facet_wrap( ~ id)\n\n\n\n\n\n\nFigure 1.25: The antibody concentration during time for all subjects and the NLM individual predictions",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data and exploratory analysis</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#non-linear-mixed-effects-nlme-model---no-covariates",
    "href": "nlme-ab.html#non-linear-mixed-effects-nlme-model---no-covariates",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.7 Non-linear mixed effects (NLME) model - no covariates",
    "text": "1.7 Non-linear mixed effects (NLME) model - no covariates\nWill be done via stochastic approximation expectation maximization (SAEM) using the saemix package.\nFirst thing: account for the specificity of saemix which expects the id column in the data frame to be of numerical type. The next chunk is re-transforming the id column in the tibble into a numerical variable and parse the numerical value (i.e. removes “ID” from “IDi”)\n\nCodetb_after_7 &lt;- tb_after_7 |&gt;\n  mutate(\n    id = parse_number(as.character(id))\n    )\ntb_after_7\n#&gt; # A tibble: 301 × 8\n#&gt;      id  time sex      age age_updated   bmi country     abelisa\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt;\n#&gt; 1     1     7 Female  35.5        35.5  20.7 West Africa    4.43\n#&gt; 2     1    15 Female  35.5        35.5  20.7 West Africa    4.12\n#&gt; 3     1    30 Female  35.5        35.6  20.7 West Africa    4.05\n#&gt; 4     1    90 Female  35.5        35.7  20.7 West Africa    3.38\n#&gt; 5     1   180 Female  35.5        36.0  20.7 West Africa    2.94\n#&gt; 6     1   365 Female  35.5        36.5  20.7 West Africa    2.61\n#&gt; # ℹ 295 more rows\n\n\nThe next chunk is defining the data as a saemix object, via saemixData.\n\nCodesaemix_data_nlme &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days)\n\n\n\nsaemix_data_nlme\n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt; 301     observations in 43 subjects\n#&gt; First lines of data:\n#&gt;    id time  abelisa mdv cens occ ytype\n#&gt; 1   1    7 4.434471   0    0   1     1\n#&gt; 2   1   15 4.124822   0    0   1     1\n#&gt; 3   1   30 4.050954   0    0   1     1\n#&gt; 4   1   90 3.382073   0    0   1     1\n#&gt; 5   1  180 2.935390   0    0   1     1\n#&gt; 6   1  365 2.606559   0    0   1     1\n#&gt; 7   1  730 2.308632   0    0   1     1\n#&gt; 8   2    7 3.664922   0    0   1     1\n#&gt; 9   2   15 4.143873   0    0   1     1\n#&gt; 10  2   30 3.967767   0    0   1     1\n\nThe next chunk implements the function from Equation 1.1:\n\nCodefunction_approx &lt;- function(psi, id, xidep){\n  time &lt;- xidep[, 1]\n  y_min &lt;- psi[id, 1]\n  y_max &lt;- psi[id, 2]\n  rate &lt;- psi[id, 3]\n  fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n  return(fpred)\n}\n#function_approx\n\n\nThe next chunk is defining the nlme model as a saemix object, via saemixModel function. The model is given by Equation 1.1, the initial values for \\phi_1 and \\phi_2 are set via the range computed over the complete data and the rate r is set at 0.05. The model considers random effects on all three parameters & constant variance, error.model = \"constant\".\n\nCodesaemix_model_nlme &lt;- saemixModel(\n  model = function_approx,\n  description = \"Approx function\", \n  psi0 = matrix(\n    c(1.6, 4.9, 0.05),\n    ncol = 3, \n    byrow = TRUE, \n    dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))),\n  transform.par = c(0, 0, 1),   # log-transform rate only\n  covariance.model = diag(1, 3),  # random effects on all\n  error.model = \"constant\"\n  )\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Approx function\n#&gt; function(psi, id, xidep){\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;     No covariate in the model.\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n# saemix_model_nlme\n\n\nThe next chunk is defining the nlme model’s parameters as a (regular R) list:\n\nCodesaemix_options_nlme &lt;- list(\n  seed = 42,\n  save = FALSE, \n  save.graph = FALSE,\n  displayProgress = FALSE,\n  print = FALSE\n  )\n#saemix_options_nlme\n\n\nThe next chunk is fitting the nlme model, a saemix object, created via saemix function.\n\nCodesaemix_fit_nlme &lt;- saemix(\n  saemix_model_nlme,\n  saemix_data_nlme,\n  saemix_options_nlme\n  )\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n# saemix_fit_nlme\n\n\nThe results are\n\nsaemix_fit_nlme@results\n#&gt; Fixed effects\n#&gt;  Parameter Estimate   SE      CV(%)\n#&gt;  y_min     2.71864  0.051789 1.90  \n#&gt;  y_max     4.22622  0.049438 1.17  \n#&gt;  rate      0.00891  0.000761 8.54  \n#&gt;  a.        0.25728  0.013047 5.07  \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0712   0.0214  30.1 \n#&gt;  omega2.y_max 0.0596   0.0198  33.3 \n#&gt;  omega2.rate  0.0398   0.0499 125.5 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 152.3174 \n#&gt;        AIC= 166.3174 \n#&gt;        BIC= 178.6458 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 152.5252 \n#&gt;        AIC= 166.5252 \n#&gt;        BIC= 178.8536\n\n\nsaemix_fit_nlme@results@fixed.effects\n#&gt; [1] 2.718639913 4.226219354 0.008911517\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for subject 1:\n\nCodefit_with_preds &lt;- saemix.predict(saemix_fit_nlme)\ntb_data &lt;- fit_with_preds@data@data\ntb_predictions &lt;- fit_with_preds@results@predictions\n\ntb_complete &lt;- cbind(tb_data, tb_predictions)\n\nggplot(subset(tb_complete, id == 1), aes(x = time)) +\n  geom_point(aes(y = abelisa, color = \"Observed\"), size = 2) +\n  geom_line(aes(y = ipred, color = \"Individual prediction\"), linewidth = 1.5) +\n  geom_line(aes(y = ypred, color = \"Population prediction\"), linewidth = 1.5, linetype = \"dashed\") +\n  scale_color_manual(\n    name = NULL,\n    values = c(\n      \"Observed\" = \"tomato\",\n      \"Individual prediction\" = \"darkseagreen\",\n      \"Population prediction\" = \"violet\"\n    )\n  ) +\n  labs(\n    title = str_c(\"Subject\", 1, \": Obs vs. Pred\", sep = \" \"),\n    x = \"Time\",\n    y = \"Antibody levels (EU/ml)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n  )\n\n\n\n\n\n\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for the subjects in the data set.\n\nCodeggplot(tb_complete, aes(x = time)) +\n  geom_point(aes(y = abelisa), color = \"tomato\", size = 2) +\n  geom_line(aes(y = ipred), color = \"darkseagreen\", linewidth = 1.5) +\n  geom_line(aes(y = ypred), color = \"violet\", linewidth = 1.5, linetype = \"dashed\") +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\n\nCodepsi &lt;- psi(saemix_fit_nlme) |&gt;\n  as_tibble() |&gt;\n  rowid_to_column(\"iteration\")\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_min)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_min\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_max)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_max\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = rate)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"rate\"    \n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a) y_min\n\n\n\n\n\n\n\n\n\n(b) y_max\n\n\n\n\n\n\n\n\n\n(c) rate\n\n\n\n\n\n\nFigure 1.26: Fixed effects during iterations\n\n\n\n\n\n\nPasin, Chloé, Irene Balelli, Thierry Van Effelterre, Viki Bockstal, Laura Solforosi, Mélanie Prague, Macaya Douoguih, and Rodolphe Thiébaut. 2019. “Dynamics of the Humoral Immune Response to a Prime-Boost Ebola Vaccine: Quantification and Sources of Variation.” Edited by Mark T. Heise. Journal of Virology 93 (18). https://doi.org/10.1128/jvi.00579-19.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#non-linear-mixed-effects-nlme-model---covariates",
    "href": "nlme-ab.html#non-linear-mixed-effects-nlme-model---covariates",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.8 Non-linear mixed effects (NLME) model - covariates",
    "text": "1.8 Non-linear mixed effects (NLME) model - covariates\n\nCodesaemix_data_nlme &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = \"age_centered\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; Covariates NA not found.\n#&gt; character(0)\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days)\n\n\n\nsaemix_data_nlme\n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt; 301     observations in 43 subjects\n#&gt; First lines of data:\n#&gt;    id time  abelisa mdv cens occ ytype\n#&gt; 1   1    7 4.434471   0    0   1     1\n#&gt; 2   1   15 4.124822   0    0   1     1\n#&gt; 3   1   30 4.050954   0    0   1     1\n#&gt; 4   1   90 3.382073   0    0   1     1\n#&gt; 5   1  180 2.935390   0    0   1     1\n#&gt; 6   1  365 2.606559   0    0   1     1\n#&gt; 7   1  730 2.308632   0    0   1     1\n#&gt; 8   2    7 3.664922   0    0   1     1\n#&gt; 9   2   15 4.143873   0    0   1     1\n#&gt; 10  2   30 3.967767   0    0   1     1\n\nThe decay rate \\phi_3 is assumed to depend on age through a linear relationship on the log scale, i.e. \n\n\\begin{equation}\n\\log(\\psi^{i}_3)\n=\n\\log(\\psi_3)\n+\n\\beta_{\\text{age}}\n\\left(\n\\text{age}_i\n-\n\\overline{\\text{age}}\n\\right)\n+\n\\nu_{3}\n.\n\\end{equation}\n\\tag{1.7}\n\nCodetb_after_7 &lt;- tb_after_7|&gt;\n  mutate(\n    age_centered = age - mean(tb_after_7$age, na.rm = TRUE)\n  )\n#tb_after_7 &lt;- as.data.frame(tb_after_7)\n\n\n\nCodefunction_approx &lt;- function(psi, id, xidep) {\n  time &lt;- xidep[, 1]\n  y_min &lt;- psi[id, 1]\n  y_max &lt;- psi[id, 2]\n  rate  &lt;- psi[id, 3]\n  fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n  return(fpred)\n}\n\n\n\nCodepsi0_matrix &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.0, 0.01), # covariate effect on rate only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\n\n\ncovariate_model_matrix &lt;- matrix(\n  c(0, 0, 1),\n  nrow = 1,\n  ncol = 3,\n  byrow = TRUE,\n  dimnames = list(\n    c(\"age_centered\"),\n    c(\"y_min\", \"y_max\", \"rate\")\n  )\n)\ncovariate_model_matrix &lt;- as.matrix(covariate_model_matrix)\nstopifnot(is.matrix(covariate_model_matrix))\n\n\nCodecovariate_model_matrix_final &lt;- covariate_model_matrix\nsaemix_model_nlme &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_final,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;              y_min y_max rate\n#&gt; age_centered     0     0    1\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n#&gt; Cov.CondInit   0.0   0.0 0.01\n\n\n\nCodesaemix_options_nlme &lt;- list(\n  seed = 42,\n  save = FALSE,\n  save.graph = FALSE,\n  displayProgress = TRUE,\n  print = FALSE\n)\n\n\n\n# saemix_fit_nlme &lt;- saemix(\n#   saemix_model_nlme,\n#   saemix_data_nlme,\n#   saemix_options_nlme\n# )\n\n\n# saemix_fit_nlme@results\n\n\n# saemix_fit_nlme@results@fixed.effects\n\n\n# fit_with_preds &lt;- saemix.predict(saemix_fit_nlme)\n# tb_data &lt;- fit_with_preds@data@data\n# tb_predictions &lt;- fit_with_preds@results@predictions\n# \n# tb_complete &lt;- cbind(tb_data, tb_predictions)\n\n\n# fit_with_preds &lt;- saemix.predict(saemix_fit_nlme)\n# \n# tb_data &lt;- fit_with_preds@data@data\n# tb_predictions &lt;- fit_with_preds@results@predictions\n# tb_complete &lt;- cbind(tb_data, tb_predictions)\n# \n# library(ggplot2)\n# ggplot(subset(tb_complete, id == 1), aes(x = time)) +\n#   geom_point(aes(y = abelisa, color = \"Observed\"), size = 2) +\n#   geom_line(aes(y = ipred, color = \"Individual prediction\"), linewidth = 1.5) +\n#   geom_line(aes(y = ypred, color = \"Population prediction\"), linewidth = 1.5, linetype = \"dashed\") +\n#   scale_color_manual(\n#     name = NULL,\n#     values = c(\"Observed\" = \"tomato\", \"Individual prediction\" = \"darkseagreen\", \"Population prediction\" = \"violet\")\n#   ) +\n#   labs(\n#     title = \"Subject 1: Observed vs. Predicted\",\n#     x = \"Time (Days)\",\n#     y = \"Antibody Level (EU/ml)\"\n#   ) +\n#   theme_bw() +\n#   theme(legend.position = \"bottom\")\n\n\nCode# Fit nonlinear mixed model\n# nlme_sub_all &lt;- nlme(\n#   model = abelisa ~ f_approx_2(y_min, y_max, rate, time),\n#   data = tb_after_7,\n#   fixed = y_min + y_max + rate ~ 1,\n#   random = y_min ~ 1 | id,\n#   start = psi_vals,\n#   control = nlmeControl(msMaxIter = 200)\n#   )\n# \n# nlme_sub_all\n\n\n# nlme_fit &lt;- nlme(\n#   model = y ~ logistic_model(Asym, Rate, xmid, time),\n#   data = data,\n#   fixed = Asym + Rate + xmid ~ 1,\n#   random = Asym + Rate ~ 1 | subject,  # Random effects on Asym and Rate\n#   start = c(Asym = 90, Rate = 0.2, xmid = 4.5),\n#   control = nlmeControl(msMaxIter = 200)\n# )\n# \n# nlme_fit\n\n\n#broom::tidy(nlme_sub_all) |&gt;\n#  knitr::kable(align = \"ccc\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "nlme-ab.html#the-model-proposed-by-pasin2019",
    "href": "nlme-ab.html#the-model-proposed-by-pasin2019",
    "title": "1  NLME models for antibody concentration decay",
    "section": "\n1.9 The model proposed by (Pasin et al. 2019)\n",
    "text": "1.9 The model proposed by (Pasin et al. 2019)\n\nThe non-linear model proposed in (Pasin et al. 2019) based on three compartments, i.e. the SL cells (S), the LL cells (L) and the antibodies (A) writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d}S}{\\text{d}t}\n&\n=\n-\n\\delta_S S\n,\n\\\\\n\\frac{\\text{d}L}{\\text{d}t}\n&\n=\n-\n\\delta_L L\n,\n\\\\\n\\frac{\\text{d}A}{\\text{d}t}\n&\n=\n\\theta_S S\n+\n\\theta_L L\n-\n\\delta_S A\n,\n\\end{split}\n\\end{equation}\n\\tag{1.8}\nwith\n\n\\delta_S representing the decay rate over time of the long-lived (SL) antibody-secreting cells,\n\\theta_S representing the antibodies production rate of SL antibody-secreting cells,\n\\delta_L representing the decay rate over time of the long-lived (LL) antibodies,\n\\theta_L representing the antibodies production rate of LL antibody-secreting cells,\n\\delta_A representing the decay rate of antibodies.\n\nThe equation for the antibodies A is the non-homogeneous linear ordinary differential equation (ODE) given by:\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n=\n\\phi_S\n\\exp{\\left(-\\delta_S t \\right)}\n+\n\\phi_L\n\\exp{\\left( -\\delta_L t \\right)}\n-\n\\delta_A\nA\n,\n\\end{equation}\n\\tag{1.9}\nwith\n\n\\begin{equation}\n\\phi_S = \\theta_S S_0,\n\\quad\nS_0 = S(0)\n,\n\\end{equation}\n\\tag{1.10}\nand \n\\begin{equation}\n\\phi_L = \\theta_L L_0,\n\\quad\nL_0 = L(0)\n,\n\\end{equation}\n\\tag{1.11}\nEquation 1.9 writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+ \\delta_A A\n=\n\\phi_S \\exp(-\\delta_S t)\n+\n\\phi_L \\exp(-\\delta_L t)\n\\end{equation}\n\\tag{1.12}\nor equivalently\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t} + P(t) A = Q(t)\n\\end{equation}\n\\tag{1.13}\nwith:\n\n\nP(t) = \\delta_f (i.e. constant),\n\nQ(t) = \\phi_S \\exp(-\\delta_S t) + \\phi_L \\exp(-\\delta_L t).\n\nThe homogeneous equation writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+\n\\delta_A\nA\n=\n0\n,\n\\end{equation}\n\\tag{1.14}\nwith the solution\n\n\\begin{equation}\nA_h(t)\n=\nc\n\\exp(-\\delta_A t)\n,\n\\end{equation}\n\\tag{1.15}\nwith c a constant determined by the initial conditions (i.e A(0)). The non-homogeneous part can be solved using an integrating factor. Let the integrating factor be\n\n\\begin{equation}\n\\mu(t)\n=\n\\exp{\n\\left(\n\\int \\delta_A \\text{d}t\n\\right)\n}\n=\n\\exp{(\\delta_A t)}\n,\n\\end{equation}\n\\tag{1.16}\nand multiplying by the integrating factor, Equation 1.12 writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d} }{\\text{d}t}\n\\left(\n\\exp(\\delta_f t) f(t)\n\\right)\n&\n=\n\\phi_S\n\\exp\n\\left(\n(\\delta_A - \\delta_S) t\n\\right)\n\\\\\n&\n+\n\\phi_L\n\\exp\n\\left(\n(\\delta_A - \\delta_L) t\n\\right)\n.\n\\end{split}\n\\end{equation}\n\\tag{1.17}\nIntegrating both sides (with respect to t) writes:\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\phi_S\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_S) t \\right)\n}\n\\text{d}t\n\\\\\n&\n+\n\\phi_L\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_L) t \\right)\n}\n\\text{d}t\n.\n\\end{split}\n\\end{equation}\n\\tag{1.18}\nThe first integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n+\nc_1\n,\n\\end{equation}\n\\tag{1.19}\nand the second integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n+\nc_2\n.\n\\end{equation}\n\\tag{1.20}\nPlugging Equation 1.19 and Equation 1.20 in Equation 1.18 writes\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\\\\n&\n+\nc\n.\n\\end{split}\n\\end{equation}\n\\tag{1.21}\nhence\n\n\\begin{equation}\n\\begin{split}\nA(t)\n&\n=\nc\n\\exp(-\\delta_A t)\n\\\\\n&\n+\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp \\left( -\\delta_S t \\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp \\left( -\\delta_L t \\right)\n,\n\\end{split}\n\\end{equation}\n\\tag{1.22}\nwith c a constant determined by the initial condition (i.e. A(0)) plugged-in from the data, i.e. the abelisa value corresponding to the second time instance measurement (i.e. the 7 days corresponding measurement). Assuming the second time instance measurement is A(0) = a, the constant writes\n\n\\begin{equation}\nc\n=\na\n-\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n-\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n.\n\\end{equation}\n\\tag{1.23}\nLet \\bm{\\psi} denote the vector of parameters for the decay rates (LL antibodies, SL antibodies and antibodies) and \\phi_S and \\phi_L\n\n\\begin{equation}\n\\bm{\\psi}=\n\\begin{bmatrix}\n\\phi_S & \\delta_S & \\phi_L & \\delta_L & \\delta_{Ab}\n\\end{bmatrix}\n.\n\\end{equation}\n\\tag{1.24}\nThe following mixed-effect model each parameter \\xi_{k}, with k = 1, \\ldots, 5 is considered:\n\n\\begin{equation}\n\\log{\\left( \\xi_{k}^{i} \\right)}\n=\n\\log{\\left( \\xi_{k0} \\right)}\n+\n\\bm{\\beta}^{T}_{k}\n\\mathbf{z}_{k}^{i}\n+\n\\nu_{k}^{i}\n,\n\\end{equation}\n\\tag{1.25}\nwhere\n\n\\xi^{i}_{k} represents the kth parameters corresponding to the ith subject,\n\\xi_{k0} represents the fixed effect corresponding to the kth element of the parameters vector,\n\\mathbf{z}^{i}_{k} represents the vector of independent variables of the model,\n\\bm{\\beta}_{k} represents the coefficents corresponding to \\mathrm{z}^{i}_{k},\n\n\\nu^{i}_{k} represents the individual effect, assumed to\n\nfollow a centered normal distributed with variance \\omega_{k}^{2}\n\n\n\n\\begin{equation}\n\\nu^{i}_{k}\n\\sim\n\\mathcal N \\left( 0, \\omega_{k}^{2} \\right)\n\\end{equation}\n\\tag{1.26}\n\nbe mutually independent\n\n\n\\begin{equation}\n\\nu^{i}_{k} \\perp \\!\\!\\!\\! \\perp\\nu^{j}_{l}\n\\end{equation}\n\\tag{1.27}\n\n\nThe antibody concentration for patient i at the jth time instance measurement is assumed to be an additional error model\n\n\\begin{equation}\n\\mathrm{y}_{ij}\n=\n\\log_{10}\n\\left(\nA(\\bm{\\psi}^{i},t_{ij})\n\\right)\n+\n\\epsilon_{ij}\n,\n\\end{equation}\n\\tag{1.28}\nwith the noise following a centered normal distributed with the same variance \\omega_{A}^{2} (homoscedasticity), i.e.\n\n\\begin{equation}\n\\epsilon_{ij}\n\\sim\n\\mathcal N \\left( 0, \\sigma_{A}^{2} \\right)\n.\n\\end{equation}\n\\tag{1.29}\nThe complete set of model’s parameters is\n\n\\begin{equation}\n\\bm{\\theta}\n=\n\\begin{bmatrix}\n\\left( \\xi_{k0} \\right)_{k = 1, 5}\n&\n\\left( \\bm{\\beta}_{k} \\right)_{k = 1, 5}\n&\n\\left( \\omega_{k} \\right)_{k = 1, 5}\n&\n\\sigma_{A}\n\\end{bmatrix}\n\\end{equation}\n\\tag{1.30}\nCentering the age in the data:\n\ntb_clean_centered &lt;- tb_clean |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_clean_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_clean_centered\n#   )\n\n\ntb_after_7_centered &lt;- tb_after_7 |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_after_7_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_after_7_centered\n#   )\n\n\n# # consntat corresponding to intial values\n# c_const &lt;- 100\n# \n# # Nonlinear function with log-parameters and fixed c\n# f_model_log &lt;- function(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L) {\n#   phi_S &lt;- exp(log_phi_S)\n#   phi_L &lt;- exp(log_phi_L)\n#   delta_A &lt;- exp(log_delta_A)\n#   delta_S &lt;- exp(log_delta_S)\n#   delta_L &lt;- exp(log_delta_L)\n# \n#   c_const * exp(-delta_A * time) +\n#     (phi_S / (delta_A - delta_S)) * exp(-delta_S * time) +\n#     (phi_L / (delta_A - delta_L)) * exp(-delta_L * time)\n# }\n# \n# # Starting values (log-scale for parameters)\n# start_vals &lt;- c(\n#   log_phi_S = log(50),\n#   log_phi_L = log(30),\n#   log_delta_A = log(0.0005),\n#   log_delta_S = log(0.005),\n#   log_delta_L = log(0.001)\n# )\n# \n# # Fit nlme model:\n# nlme_model &lt;- nlme(\n#   abelisa ~ f_model_log(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L),\n#   \n#   # Data: \n#   data = tb_after_7_centered,\n# \n#   # Fixed effects:\n#   fixed = list(\n#     log_phi_S ~ sex + age_centered + bmi + country,\n#     log_phi_L ~ sex + age_centered + bmi + country,\n#     log_delta_A ~ sex + age_centered + bmi + country,\n#     log_delta_S + log_delta_L ~ 1  # no covariates on delta S and L params\n#   ),\n# \n#   # Random effects on log_phi_S, log_phi_L, per subject\n#   random = pdDiag(log_phi_S + log_phi_L ~ 1 | id),\n# \n#   start = start_vals,\n# \n#   control = nlmeControl(\n#     pnlsTol = 0.1, \n#     msMaxIter = 100, \n#     msMaxEval = 1000\n#   )\n# )\n# \n# summary(nlme_model)\n\n\n\n\n\nPasin, Chloé, Irene Balelli, Thierry Van Effelterre, Viki Bockstal, Laura Solforosi, Mélanie Prague, Macaya Douoguih, and Rodolphe Thiébaut. 2019. “Dynamics of the Humoral Immune Response to a Prime-Boost Ebola Vaccine: Quantification and Sources of Variation.” Edited by Mark T. Heise. Journal of Virology 93 (18). https://doi.org/10.1128/jvi.00579-19.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>NLME models for antibody concentration decay</span>"
    ]
  },
  {
    "objectID": "model-from-article.html",
    "href": "model-from-article.html",
    "title": "\n4  The article model\n",
    "section": "",
    "text": "4.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The article model</span>"
    ]
  },
  {
    "objectID": "model-from-article.html#introduction",
    "href": "model-from-article.html#introduction",
    "title": "\n4  The article model\n",
    "section": "",
    "text": "4.1.1 Prerequisites\n\nlibrary(tidyverse)  # tidyverse \nlibrary(nlme)       # non-linear mixed effect models\nlibrary(saemix)     # nlme package for saemix objects",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The article model</span>"
    ]
  },
  {
    "objectID": "model-from-article.html#pasin2019-article",
    "href": "model-from-article.html#pasin2019-article",
    "title": "\n4  The article model\n",
    "section": "\n4.2 (Pasin et al. 2019) article",
    "text": "4.2 (Pasin et al. 2019) article\n\nCode\ntb &lt;- read_csv(\"data/data_ebola_ab.csv\")\n\ntb &lt;- tb |&gt;\n  # clean the names\n  janitor::clean_names() |&gt;\n  # transform chr into factors\n  mutate(across(where(is.character), fct))\n\ntb_clean &lt;- tb |&gt;\n  filter(age &gt;= 0)\n\ntb_clean &lt;- tb_clean |&gt;\n  mutate(age_updated = age + time / 365) |&gt;\n  relocate(age_updated, .after = age)\n\ntb_after_7 &lt;- tb_clean |&gt;\n  filter(time != 0)\n\n\nThe non-linear model proposed in (Pasin et al. 2019) based on three compartments, i.e. the SL cells (S), the LL cells (L) and the antibodies (A) writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d}S}{\\text{d}t}\n&\n=\n-\n\\delta_S S\n,\n\\\\\n\\frac{\\text{d}L}{\\text{d}t}\n&\n=\n-\n\\delta_L L\n,\n\\\\\n\\frac{\\text{d}A}{\\text{d}t}\n&\n=\n\\theta_S S\n+\n\\theta_L L\n-\n\\delta_S A\n,\n\\end{split}\n\\end{equation}\n\\tag{4.1}\nwith\n\n\\delta_S representing the decay rate over time of the long-lived (SL) antibody-secreting cells,\n\\theta_S representing the antibodies production rate of SL antibody-secreting cells,\n\\delta_L representing the decay rate over time of the long-lived (LL) antibodies,\n\\theta_L representing the antibodies production rate of LL antibody-secreting cells,\n\\delta_A representing the decay rate of antibodies.\n\nThe equation for the antibodies A is the non-homogeneous linear ordinary differential equation (ODE) given by:\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n=\n\\phi_S\n\\exp{\\left(-\\delta_S t \\right)}\n+\n\\phi_L\n\\exp{\\left( -\\delta_L t \\right)}\n-\n\\delta_A\nA\n,\n\\end{equation}\n\\tag{4.2}\nwith\n\n\\begin{equation}\n\\phi_S = \\theta_S S_0,\n\\quad\nS_0 = S(0)\n,\n\\end{equation}\n\\tag{4.3}\nand \n\\begin{equation}\n\\phi_L = \\theta_L L_0,\n\\quad\nL_0 = L(0)\n,\n\\end{equation}\n\\tag{4.4}\nEquation 4.2 writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+ \\delta_A A\n=\n\\phi_S \\exp(-\\delta_S t)\n+\n\\phi_L \\exp(-\\delta_L t)\n\\end{equation}\n\\tag{4.5}\nor equivalently\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t} + P(t) A = Q(t)\n\\end{equation}\n\\tag{4.6}\nwith:\n\n\nP(t) = \\delta_f (i.e. constant),\n\nQ(t) = \\phi_S \\exp(-\\delta_S t) + \\phi_L \\exp(-\\delta_L t).\n\nThe homogeneous equation writes\n\n\\begin{equation}\n\\frac{\\text{d}A}{\\text{d}t}\n+\n\\delta_A\nA\n=\n0\n,\n\\end{equation}\n\\tag{4.7}\nwith the solution\n\n\\begin{equation}\nA_h(t)\n=\nc\n\\exp(-\\delta_A t)\n,\n\\end{equation}\n\\tag{4.8}\nwith c a constant determined by the initial conditions (i.e A(0)). The non-homogeneous part can be solved using an integrating factor. Let the integrating factor be\n\n\\begin{equation}\n\\mu(t)\n=\n\\exp{\n\\left(\n\\int \\delta_A \\text{d}t\n\\right)\n}\n=\n\\exp{(\\delta_A t)}\n,\n\\end{equation}\n\\tag{4.9}\nand multiplying by the integrating factor, Equation 4.5 writes\n\n\\begin{equation}\n\\begin{split}\n\\frac{\\text{d} }{\\text{d}t}\n\\left(\n\\exp(\\delta_f t) f(t)\n\\right)\n&\n=\n\\phi_S\n\\exp\n\\left(\n(\\delta_A - \\delta_S) t\n\\right)\n\\\\\n&\n+\n\\phi_L\n\\exp\n\\left(\n(\\delta_A - \\delta_L) t\n\\right)\n.\n\\end{split}\n\\end{equation}\n\\tag{4.10}\nIntegrating both sides (with respect to t) writes:\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\phi_S\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_S) t \\right)\n}\n\\text{d}t\n\\\\\n&\n+\n\\phi_L\n\\int\n\\exp{\n\\left( (\\delta_A - \\delta_L) t \\right)\n}\n\\text{d}t\n.\n\\end{split}\n\\end{equation}\n\\tag{4.11}\nThe first integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n+\nc_1\n,\n\\end{equation}\n\\tag{4.12}\nand the second integral writes\n\n\\begin{equation}\n\\int\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\text{d}t\n=\n\\frac{1}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n+\nc_2\n.\n\\end{equation}\n\\tag{4.13}\nPlugging Equation 4.12 and Equation 4.13 in Equation 4.11 writes\n\n\\begin{equation}\n\\begin{split}\n\\exp(\\delta_A t) f(t)\n&\n=\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp\n\\left(\n(\\delta_A - \\delta_S)\nt\n\\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp\n\\left(\n(\\delta_A - \\delta_L)\nt\n\\right)\n\\\\\n&\n+\nc\n.\n\\end{split}\n\\end{equation}\n\\tag{4.14}\nhence\n\n\\begin{equation}\n\\begin{split}\nA(t)\n&\n=\nc\n\\exp(-\\delta_A t)\n\\\\\n&\n+\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n\\exp \\left( -\\delta_S t \\right)\n\\\\\n&\n+\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n\\exp \\left( -\\delta_L t \\right)\n,\n\\end{split}\n\\end{equation}\n\\tag{4.15}\nwith c a constant determined by the initial condition (i.e. A(0)) plugged-in from the data, i.e. the abelisa value corresponding to the second time instance measurement (i.e. the 7 days corresponding measurement). Assuming the second time instance measurement is A(0) = a, the constant writes\n\n\\begin{equation}\nc\n=\na\n-\n\\frac{\\phi_S}{\\delta_A - \\delta_S}\n-\n\\frac{\\phi_L}{\\delta_A - \\delta_L}\n.\n\\end{equation}\n\\tag{4.16}\nLet \\bm{\\psi} denote the vector of parameters for the decay rates (LL antibodies, SL antibodies and antibodies) and \\phi_S and \\phi_L\n\n\\begin{equation}\n\\bm{\\psi}=\n\\begin{bmatrix}\n\\phi_S & \\delta_S & \\phi_L & \\delta_L & \\delta_{Ab}\n\\end{bmatrix}\n.\n\\end{equation}\n\\tag{4.17}\nThe following mixed-effect model each parameter \\xi_{k}, with k = 1, \\ldots, 5 is considered:\n\n\\begin{equation}\n\\log{\\left( \\xi_{k}^{i} \\right)}\n=\n\\log{\\left( \\xi_{k0} \\right)}\n+\n\\bm{\\beta}^{T}_{k}\n\\mathbf{z}_{k}^{i}\n+\n\\nu_{k}^{i}\n,\n\\end{equation}\n\\tag{4.18}\nwhere\n\n\\xi^{i}_{k} represents the kth parameters corresponding to the ith subject,\n\\xi_{k0} represents the fixed effect corresponding to the kth element of the parameters vector,\n\\mathbf{z}^{i}_{k} represents the vector of independent variables of the model,\n\\bm{\\beta}_{k} represents the coefficents corresponding to \\mathrm{z}^{i}_{k},\n\n\\nu^{i}_{k} represents the individual effect, assumed to\n\nfollow a centered normal distributed with variance \\omega_{k}^{2}\n\n\n\n\\begin{equation}\n\\nu^{i}_{k}\n\\sim\n\\mathcal N \\left( 0, \\omega_{k}^{2} \\right)\n\\end{equation}\n\\tag{4.19}\n\nbe mutually independent\n\n\n\\begin{equation}\n\\nu^{i}_{k} \\perp \\!\\!\\!\\! \\perp\\nu^{j}_{l}\n\\end{equation}\n\\tag{4.20}\n\n\nThe antibody concentration for patient i at the jth time instance measurement is assumed to be an additional error model\n\n\\begin{equation}\n\\mathrm{y}_{ij}\n=\n\\log_{10}\n\\left(\nA(\\bm{\\psi}^{i},t_{ij})\n\\right)\n+\n\\epsilon_{ij}\n,\n\\end{equation}\n\\tag{4.21}\nwith the noise following a centered normal distributed with the same variance \\omega_{A}^{2} (homoscedasticity), i.e.\n\n\\begin{equation}\n\\epsilon_{ij}\n\\sim\n\\mathcal N \\left( 0, \\sigma_{A}^{2} \\right)\n.\n\\end{equation}\n\\tag{4.22}\nThe complete set of model’s parameters is\n\n\\begin{equation}\n\\bm{\\theta}\n=\n\\begin{bmatrix}\n\\left( \\xi_{k0} \\right)_{k = 1, 5}\n&\n\\left( \\bm{\\beta}_{k} \\right)_{k = 1, 5}\n&\n\\left( \\omega_{k} \\right)_{k = 1, 5}\n&\n\\sigma_{A}\n\\end{bmatrix}\n\\end{equation}\n\\tag{4.23}\nCentering the age in the data:\n\ntb_clean_centered &lt;- tb_clean |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_clean_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_clean_centered\n#   )\n\n\ntb_after_7_centered &lt;- tb_after_7 |&gt;\n  mutate(age_centered = age - mean(age)) |&gt;\n  relocate(age_centered, .after = age) |&gt;\n  select(-c(age, age_updated))\n\n# tb_after_7_grouped &lt;- groupedData(\n#   abelisa ~ time | id, \n#   data = tb_after_7_centered\n#   )\n\n\n# # consntat corresponding to intial values\n# c_const &lt;- 100\n# \n# # Nonlinear function with log-parameters and fixed c\n# f_model_log &lt;- function(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L) {\n#   phi_S &lt;- exp(log_phi_S)\n#   phi_L &lt;- exp(log_phi_L)\n#   delta_A &lt;- exp(log_delta_A)\n#   delta_S &lt;- exp(log_delta_S)\n#   delta_L &lt;- exp(log_delta_L)\n# \n#   c_const * exp(-delta_A * time) +\n#     (phi_S / (delta_A - delta_S)) * exp(-delta_S * time) +\n#     (phi_L / (delta_A - delta_L)) * exp(-delta_L * time)\n# }\n# \n# # Starting values (log-scale for parameters)\n# start_vals &lt;- c(\n#   log_phi_S = log(50),\n#   log_phi_L = log(30),\n#   log_delta_A = log(0.0005),\n#   log_delta_S = log(0.005),\n#   log_delta_L = log(0.001)\n# )\n# \n# # Fit nlme model:\n# nlme_model &lt;- nlme(\n#   abelisa ~ f_model_log(time, log_phi_S, log_phi_L, log_delta_A, log_delta_S, log_delta_L),\n#   \n#   # Data: \n#   data = tb_after_7_centered,\n# \n#   # Fixed effects:\n#   fixed = list(\n#     log_phi_S ~ sex + age_centered + bmi + country,\n#     log_phi_L ~ sex + age_centered + bmi + country,\n#     log_delta_A ~ sex + age_centered + bmi + country,\n#     log_delta_S + log_delta_L ~ 1  # no covariates on delta S and L params\n#   ),\n# \n#   # Random effects on log_phi_S, log_phi_L, per subject\n#   random = pdDiag(log_phi_S + log_phi_L ~ 1 | id),\n# \n#   start = start_vals,\n# \n#   control = nlmeControl(\n#     pnlsTol = 0.1, \n#     msMaxIter = 100, \n#     msMaxEval = 1000\n#   )\n# )\n# \n# summary(nlme_model)\n\n\n\n\n\nPasin, Chloé, Irene Balelli, Thierry Van Effelterre, Viki Bockstal, Laura Solforosi, Mélanie Prague, Macaya Douoguih, and Rodolphe Thiébaut. 2019. “Dynamics of the Humoral Immune Response to a Prime-Boost Ebola Vaccine: Quantification and Sources of Variation.” Edited by Mark T. Heise. Journal of Virology 93 (18). https://doi.org/10.1128/jvi.00579-19.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The article model</span>"
    ]
  },
  {
    "objectID": "nlme.html",
    "href": "nlme.html",
    "title": "\n2  NLME model - no covariates\n",
    "section": "",
    "text": "2.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>NLME model - no covariates</span>"
    ]
  },
  {
    "objectID": "nlme.html#introduction",
    "href": "nlme.html#introduction",
    "title": "\n2  NLME model - no covariates\n",
    "section": "",
    "text": "2.1.1 Prerequisites\n\nlibrary(tidyverse)  # tidyverse \nlibrary(nlme)       # non-linear mixed effect models\nlibrary(saemix)     # nlme package for saemix objects",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>NLME model - no covariates</span>"
    ]
  },
  {
    "objectID": "nlme.html#nlme-with-no-covariates",
    "href": "nlme.html#nlme-with-no-covariates",
    "title": "\n2  NLME model - no covariates\n",
    "section": "\n2.2 NLME with no covariates",
    "text": "2.2 NLME with no covariates\n\nCodetb &lt;- read_csv(\"data/data_ebola_ab.csv\")\n\ntb &lt;- tb |&gt;\n  # clean the names\n  janitor::clean_names() |&gt;\n  # transform chr into factors\n  mutate(across(where(is.character), fct))\n\ntb_clean &lt;- tb |&gt;\n  filter(age &gt;= 0)\n\ntb_clean &lt;- tb_clean |&gt;\n  mutate(age_updated = age + time / 365) |&gt;\n  relocate(age_updated, .after = age)\n\ntb_after_7 &lt;- tb_clean |&gt;\n  filter(time != 0)\n\n\nWill be done via stochastic approximation expectation maximization (SAEM) using the saemix package.\nFirst thing: account for the specificity of saemix which expects the id column in the data frame to be of numerical type. The next chunk is re-transforming the id column in the tibble into a numerical variable and parse the numerical value (i.e. removes “ID” from “IDi”)\n\nCodetb_after_7 &lt;- tb_after_7 |&gt;\n  mutate(\n    id = parse_number(as.character(id))\n    )\ntb_after_7\n#&gt; # A tibble: 301 × 8\n#&gt;      id  time sex      age age_updated   bmi country     abelisa\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt;\n#&gt; 1     1     7 Female  35.5        35.5  20.7 West Africa    4.43\n#&gt; 2     1    15 Female  35.5        35.5  20.7 West Africa    4.12\n#&gt; 3     1    30 Female  35.5        35.6  20.7 West Africa    4.05\n#&gt; 4     1    90 Female  35.5        35.7  20.7 West Africa    3.38\n#&gt; 5     1   180 Female  35.5        36.0  20.7 West Africa    2.94\n#&gt; 6     1   365 Female  35.5        36.5  20.7 West Africa    2.61\n#&gt; # ℹ 295 more rows\n\n\nThe next chunk is defining the data as a saemix object, via saemixData.\n\nCodesaemix_data_nlme &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days)\n\n\n\nsaemix_data_nlme\n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt; 301     observations in 43 subjects\n#&gt; First lines of data:\n#&gt;    id time  abelisa mdv cens occ ytype\n#&gt; 1   1    7 4.434471   0    0   1     1\n#&gt; 2   1   15 4.124822   0    0   1     1\n#&gt; 3   1   30 4.050954   0    0   1     1\n#&gt; 4   1   90 3.382073   0    0   1     1\n#&gt; 5   1  180 2.935390   0    0   1     1\n#&gt; 6   1  365 2.606559   0    0   1     1\n#&gt; 7   1  730 2.308632   0    0   1     1\n#&gt; 8   2    7 3.664922   0    0   1     1\n#&gt; 9   2   15 4.143873   0    0   1     1\n#&gt; 10  2   30 3.967767   0    0   1     1\n\nThe next chunk implements the function from Equation 1.1:\n\nCodefunction_approx &lt;- function(psi, id, xidep){\n  time &lt;- xidep[, 1]\n  y_min &lt;- psi[id, 1]\n  y_max &lt;- psi[id, 2]\n  rate &lt;- psi[id, 3]\n  fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n  return(fpred)\n}\n#function_approx\n\n\nThe next chunk is defining the nlme model as a saemix object, via saemixModel function. The model is given by Equation 1.1, the initial values for \\phi_1 and \\phi_2 are set via the range computed over the complete data and the rate r is set at 0.05. The model considers random effects on all three parameters & constant variance, error.model = \"constant\".\n\nCodesaemix_model_nlme &lt;- saemixModel(\n  model = function_approx,\n  description = \"Approx function\", \n  psi0 = matrix(\n    c(1.6, 4.9, 0.05),\n    ncol = 3, \n    byrow = TRUE, \n    dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))),\n  transform.par = c(0, 0, 1),   # log-transform rate only\n  covariance.model = diag(1, 3),  # random effects on all\n  error.model = \"constant\"\n  )\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Approx function\n#&gt; function(psi, id, xidep){\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;     No covariate in the model.\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n# saemix_model_nlme\n\n\n\nsaemix_model_nlme\n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Approx function \n#&gt;      3 parameters: y_min y_max rate \n#&gt;      error model: constant \n#&gt; No covariate\n\nThe next chunk is defining the nlme model’s parameters as a (regular R) list:\n\nCodesaemix_options_nlme &lt;- list(\n  seed = 42,\n  save = FALSE, \n  save.graph = FALSE,\n  displayProgress = FALSE,\n  print = FALSE\n  )\n#saemix_options_nlme\n\n\nThe next chunk is fitting the nlme model, a saemix object, created via saemix function.\n\nCodesaemix_fit_nlme &lt;- saemix(\n  saemix_model_nlme,\n  saemix_data_nlme,\n  saemix_options_nlme\n  )\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n# saemix_fit_nlme\n\n\nThe results are\n\nsaemix_fit_nlme@results\n#&gt; Fixed effects\n#&gt;  Parameter Estimate   SE      CV(%)\n#&gt;  y_min     2.71864  0.051789 1.90  \n#&gt;  y_max     4.22622  0.049438 1.17  \n#&gt;  rate      0.00891  0.000761 8.54  \n#&gt;  a.        0.25728  0.013047 5.07  \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0712   0.0214  30.1 \n#&gt;  omega2.y_max 0.0596   0.0198  33.3 \n#&gt;  omega2.rate  0.0398   0.0499 125.5 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 152.3174 \n#&gt;        AIC= 166.3174 \n#&gt;        BIC= 178.6458 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 152.5252 \n#&gt;        AIC= 166.5252 \n#&gt;        BIC= 178.8536\n\n\nsaemix_fit_nlme@results@fixed.effects\n#&gt; [1] 2.718639913 4.226219354 0.008911517\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for subject 1:\n\nCodefit_with_preds &lt;- saemix.predict(saemix_fit_nlme)\ntb_data &lt;- fit_with_preds@data@data\ntb_predictions &lt;- fit_with_preds@results@predictions\n\ntb_complete &lt;- cbind(tb_data, tb_predictions)\n\nggplot(subset(tb_complete, id == 1), aes(x = time)) +\n  geom_point(aes(y = abelisa, color = \"Observed\"), size = 2) +\n  geom_line(aes(y = ipred, color = \"Individual prediction\"), linewidth = 1.5) +\n  geom_line(aes(y = ypred, color = \"Population prediction\"), linewidth = 1.5, linetype = \"dashed\") +\n  scale_color_manual(\n    name = NULL,\n    values = c(\n      \"Observed\" = \"tomato\",\n      \"Individual prediction\" = \"darkseagreen\",\n      \"Population prediction\" = \"violet\"\n    )\n  ) +\n  labs(\n    title = str_c(\"Subject\", 1, \": Obseved vs. Prediction\", sep = \" \"),\n    x = \"Time\",\n    y = \"Antibody levels (EU/ml)\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\",\n  )\n\n\n\n\n\n\n\nThe following chunk plots the comparison between the observed and the (individual and population) prediction for the subjects in the data set.\n\nCodeggplot(tb_complete, aes(x = time)) +\n  geom_point(aes(y = abelisa), color = \"tomato\", size = 2) +\n  geom_line(aes(y = ipred), color = \"darkseagreen\", linewidth = 1.5) +\n  geom_line(aes(y = ypred), color = \"violet\", linewidth = 1.5, linetype = \"dashed\") +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\n\nCodepsi &lt;- psi(saemix_fit_nlme) |&gt;\n  as_tibble() |&gt;\n  rowid_to_column(\"iteration\")\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_min)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_min\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_max)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_max\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = rate)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"rate\"    \n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a) y_min\n\n\n\n\n\n\n\n\n\n(b) y_max\n\n\n\n\n\n\n\n\n\n(c) rate\n\n\n\n\n\n\nFigure 2.1: Fixed effects during iterations",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>NLME model - no covariates</span>"
    ]
  },
  {
    "objectID": "nlme-covariates.html",
    "href": "nlme-covariates.html",
    "title": "\n3  Non-linear mixed effects (NLME) model - covariates\n",
    "section": "",
    "text": "3.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Non-linear mixed effects (NLME) model - covariates</span>"
    ]
  },
  {
    "objectID": "nlme-covariates.html#introduction",
    "href": "nlme-covariates.html#introduction",
    "title": "\n3  Non-linear mixed effects (NLME) model - covariates\n",
    "section": "",
    "text": "3.1.1 Prerequisites\n\nlibrary(tidyverse)  # tidyverse \nlibrary(nlme)       # non-linear mixed effect models\nlibrary(saemix)     # nlme package for saemix objects",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Non-linear mixed effects (NLME) model - covariates</span>"
    ]
  },
  {
    "objectID": "nlme-covariates.html#nlme-with-covariates",
    "href": "nlme-covariates.html#nlme-with-covariates",
    "title": "\n3  Non-linear mixed effects (NLME) model - covariates\n",
    "section": "\n3.2 NLME with covariates",
    "text": "3.2 NLME with covariates\nThe decay rate \\phi_3 is assumed to depend on age through a linear relationship on the log scale, i.e. \n\n\\begin{equation}\n\\log(\\psi^{i}_3)\n=\n\\log(\\psi_3)\n+\n\\beta_{\\text{age}}\n\\left(\n\\text{age}_i\n-\n\\overline{\\text{age}}\n\\right)\n+\n\\nu_{3}\n.\n\\end{equation}\n\\tag{3.1}\n\nCodetb &lt;- read_csv(\"data/data_ebola_ab.csv\")\n\ntb &lt;- tb |&gt;\n  # clean the names\n  janitor::clean_names() |&gt;\n  # transform chr into factors\n  mutate(across(where(is.character), fct))\n\ntb_clean &lt;- tb |&gt;\n  filter(age &gt;= 0)\n\ntb_clean &lt;- tb_clean |&gt;\n  mutate(age_updated = age + time / 365) |&gt;\n  relocate(age_updated, .after = age)\n\ntb_after_7 &lt;- tb_clean |&gt;\n  filter(time != 0)\n\n\nThe next chunk is centering the age.\n\nCode# Centering the age covariate \ntb_after_7 &lt;- tb_after_7 |&gt;\n  mutate(age_centered = age - mean(age, na.rm = TRUE))\n\n\nThe next chunk implements the function from Equation 1.1\n\nCodefunction_approx &lt;- function(psi, id, xidep) {\n  time &lt;- xidep[, 1]\n  y_min &lt;- psi[id, 1]\n  y_max &lt;- psi[id, 2]\n  rate  &lt;- psi[id, 3]\n  fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n  return(fpred)\n}\n\n\nThe next chunk is defining the data as a saemix object, via saemixData() function.\n\nCodesaemix_data_nlme &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = \"age_centered\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; [1] \"age_centered\"\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days) \n#&gt;     covariates: age_centered (-)\n\n\n\nsaemix_data_nlme\n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     covariates: age_centered (-) \n#&gt; 301     observations in 43 subjects\n#&gt; First lines of data:\n#&gt;     id time  abelisa age_centered mdv cens occ ytype\n#&gt; 1  ID1    7 4.434471    -8.574021   0    0   1     1\n#&gt; 2  ID1   15 4.124822    -8.574021   0    0   1     1\n#&gt; 3  ID1   30 4.050954    -8.574021   0    0   1     1\n#&gt; 4  ID1   90 3.382073    -8.574021   0    0   1     1\n#&gt; 5  ID1  180 2.935390    -8.574021   0    0   1     1\n#&gt; 6  ID1  365 2.606559    -8.574021   0    0   1     1\n#&gt; 7  ID1  730 2.308632    -8.574021   0    0   1     1\n#&gt; 8  ID2    7 3.664922    -2.119769   0    0   1     1\n#&gt; 9  ID2   15 4.143873    -2.119769   0    0   1     1\n#&gt; 10 ID2   30 3.967767    -2.119769   0    0   1     1\n\nThe next chunk is defining the nlme model as a saemix object, via saemixModel() function. The model is given by Equation 1.1, the initial values for \\psi_1 and \\psi_2 are set via the range computed over the complete data and the rate \\psi_3 is set at 0.05. The model considers random effects on all three parameters & constant variance, error.model = \"constant\". Covariate (age) is considered to have an effect over the rate.\n\nCodepsi0_matrix &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.0, 0.01), # covariate effect on rate only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\ncovariate_model_matrix &lt;- matrix(\n  data = c(0, 0, 1),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"age_centered\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;              y_min y_max rate\n#&gt; age_centered     0     0    1\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n#&gt; Cov.CondInit   0.0   0.0 0.01\n\n\n\nsaemix_model_nlme\n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate \n#&gt;      3 parameters: y_min y_max rate \n#&gt;      error model: constant \n#&gt;      covariate model:\n#&gt;              y_min y_max rate\n#&gt; age_centered     0     0    1\n\nThe next chunk is defining the nlme model’s parameters as a (regular R) list (this doesn’t change with respect to the no covariates model’s implementation).\n\nCodesaemix_options_nlme &lt;- list(\n  seed = 42,\n  save = FALSE,\n  save.graph = FALSE,\n  displayProgress = FALSE,\n  print = FALSE\n)\n\n\nThe next chunk is fitting the nlme model, a saemix object, created via saemix() function.\n\nCodesaemix_fit_nlme &lt;- saemix(\n  saemix_model_nlme,\n  saemix_data_nlme,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\n\n\n# Fixed effects and covariate effects\nsaemix_fit_nlme@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter               Estimate   SE      CV(%) p-value\n#&gt;  y_min                    2.73088 0.051108   1.87 -      \n#&gt;  y_max                    4.24200 0.050202   1.18 -      \n#&gt;  rate                     0.00936 0.000786   8.40 -      \n#&gt;  beta_age_centered(rate) -0.00238 0.003976 167.23 0.275  \n#&gt;  a.                       0.25627 0.012989   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0703   0.0210  29.8 \n#&gt;  omega2.y_max 0.0618   0.0204  33.0 \n#&gt;  omega2.rate  0.0339   0.0482 142.1 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 150.6239 \n#&gt;        AIC= 166.6239 \n#&gt;        BIC= 180.7135 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 150.7865 \n#&gt;        AIC= 166.7865 \n#&gt;        BIC= 180.8761\n\n\n# Fixed effects and covariate effects\nsaemix_fit_nlme@results@fixed.effects\n#&gt; [1]  2.730882113  4.241999871  0.009355897 -0.002377555\n\n\nCodefit_with_preds &lt;- saemix.predict(saemix_fit_nlme)\ntb_data &lt;- fit_with_preds@data@data\ntb_predictions &lt;- fit_with_preds@results@predictions\n\ntb_complete &lt;- cbind(tb_data, tb_predictions)\n\n\n\nCodetb_complete |&gt;\n  filter(id == 1) |&gt;\nggplot(aes(x = time)) +\n  geom_point(aes(y = abelisa, color = \"Observed\"), size = 2) +\n  geom_line(aes(y = ipred, color = \"Individual prediction\"), linewidth = 1.5) +\n  geom_line(aes(y = ypred, color = \"Population prediction\"), linewidth = 1.5, linetype = \"dashed\") +\n  scale_color_manual(\n    name = NULL,\n    values = c(\"Observed\" = \"tomato\", \"Individual prediction\" = \"darkseagreen\", \"Population prediction\" = \"violet\")\n  ) +\n  labs(\n    title = \"Subject 1: Observed vs. Predicted\",\n    x = \"Time (Days)\",\n    y = \"Antibody Level (EU/ml)\"\n  ) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n#&gt; Warning: No shared levels found between `names(values)` of the manual scale and the\n#&gt; data's colour values.\n\n\n\n\n\n\n\n\nCodeggplot(tb_complete, aes(x = time)) +\n  geom_point(aes(y = abelisa), color = \"tomato\", size = 2) +\n  geom_line(aes(y = ipred), color = \"darkseagreen\", linewidth = 1.5) +\n  geom_line(aes(y = ypred), color = \"violet\", linewidth = 1.5, linetype = \"dashed\") +\n  labs(\n    title = NULL,\n    x = NULL,\n    y = NULL\n  ) +\n  facet_wrap(~ id) +\n  theme_bw()\n\n\n\n\n\n\n\nCodepsi &lt;- psi(saemix_fit_nlme) |&gt;\n  as_tibble() |&gt;\n  rowid_to_column(\"iteration\")\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_min)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_min\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = y_max)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"y_max\"    \n  ) +\n  theme_bw()\n\npsi |&gt;\n  ggplot(aes(x = iteration, y = rate)) +\n  geom_line(color = \"tomato\") +\n  labs(\n    x = \"Iteration\",\n    y = \"rate\"    \n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n(a) y_min\n\n\n\n\n\n\n\n\n\n(b) y_max\n\n\n\n\n\n\n\n\n\n(c) rate\n\n\n\n\n\n\nFigure 3.1: Fixed effects during iterations",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Non-linear mixed effects (NLME) model - covariates</span>"
    ]
  },
  {
    "objectID": "nlme-covariates.html#model-selection",
    "href": "nlme-covariates.html#model-selection",
    "title": "\n3  Non-linear mixed effects (NLME) model - covariates\n",
    "section": "\n3.3 Model selection",
    "text": "3.3 Model selection\n\nCode# Centering the bmi covariate \ntb_after_7 &lt;- tb_after_7 |&gt;\n  mutate(bmi_centered = bmi - mean(bmi, na.rm = TRUE))\n\n\n\n3.3.1 Age centered\n\nCode# Define models with main effects\nsaemix_data_nlme_age &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = \"age_centered\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; [1] \"age_centered\"\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days) \n#&gt;     covariates: age_centered (-)\n\ncovariate_model_matrix_rate &lt;- matrix(\n  data = c(0, 0, 1),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"age_centered\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_rate &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.0, 0.01), # covariate effect on rate only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_rate &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_rate,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_rate,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;              y_min y_max rate\n#&gt; age_centered     0     0    1\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n#&gt; Cov.CondInit   0.0   0.0 0.01\n\nsaemix_fit_nlme_age_rate &lt;- saemix(\n  saemix_model_nlme_rate,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter               Estimate   SE      CV(%) p-value\n#&gt;  y_min                    2.73088 0.051108   1.87 -      \n#&gt;  y_max                    4.24200 0.050202   1.18 -      \n#&gt;  rate                     0.00936 0.000786   8.40 -      \n#&gt;  beta_age_centered(rate) -0.00238 0.003976 167.23 0.275  \n#&gt;  a.                       0.25627 0.012989   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0703   0.0210  29.8 \n#&gt;  omega2.y_max 0.0618   0.0204  33.0 \n#&gt;  omega2.rate  0.0339   0.0482 142.1 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 150.6239 \n#&gt;        AIC= 166.6239 \n#&gt;        BIC= 180.7135 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 150.7865 \n#&gt;        AIC= 166.7865 \n#&gt;        BIC= 180.8761\n\n#----\n\ncovariate_model_matrix_y_max &lt;- matrix(\n  data = c(0, 1, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"age_centered\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_max &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.01, 0.0), # covariate effect on y_max only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_max &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_max,\n  transform.par = c(0, 1, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_max,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     log-normal   Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;              y_min y_max rate\n#&gt; age_centered     0     1    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6  4.90 0.05\n#&gt; Cov.CondInit   0.0  0.01 0.00\n\nsaemix_fit_nlme_age_y_max &lt;- saemix(\n  saemix_model_nlme_y_max,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter                Estimate   SE      CV(%) p-value\n#&gt;  y_min                    2.726228 0.051339   1.88 -      \n#&gt;  y_max                    4.231942 0.050271   1.19 -      \n#&gt;  beta_age_centered(y_max) 0.000076 0.000578 760.47 0.448  \n#&gt;  rate                     0.009198 0.000774   8.41 -      \n#&gt;  a.                       0.255963 0.012980   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.0709   0.02113  29.8 \n#&gt;  omega2.y_max 0.0035   0.00114  32.7 \n#&gt;  omega2.rate  0.0350   0.04855 138.6 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.2787 \n#&gt;        AIC= 167.2787 \n#&gt;        BIC= 181.3683 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.4833 \n#&gt;        AIC= 167.4833 \n#&gt;        BIC= 181.5729\n\n#----\n\ncovariate_model_matrix_y_min &lt;- matrix(\n  data = c(1, 0, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"age_centered\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_min &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.01, 0.0, 0.0), # covariate effect on y_min only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_min &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_min,\n  transform.par = c(1, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_min,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     log-normal   Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;              y_min y_max rate\n#&gt; age_centered     1     0    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit  1.60   4.9 0.05\n#&gt; Cov.CondInit  0.01   0.0 0.00\n\nsaemix_fit_nlme_age_y_min &lt;- saemix(\n  saemix_model_nlme_y_min,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter                Estimate    SE      CV(%) p-value\n#&gt;  y_min                     2.717381 0.050796   1.87 -      \n#&gt;  beta_age_centered(y_min) -0.000234 0.000898 383.62 0.397  \n#&gt;  y_max                     4.242755 0.050256   1.18 -      \n#&gt;  rate                      0.009375 0.000801   8.55 -      \n#&gt;  a.                        0.256829 0.013033   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.00928  0.00281  30.3 \n#&gt;  omega2.y_max 0.06173  0.02052  33.2 \n#&gt;  omega2.rate  0.04454  0.05019 112.7 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.2472 \n#&gt;        AIC= 167.2472 \n#&gt;        BIC= 181.3368 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.642 \n#&gt;        AIC= 167.642 \n#&gt;        BIC= 181.7316\n\n\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter               Estimate   SE      CV(%) p-value\n#&gt;  y_min                    2.73088 0.051108   1.87 -      \n#&gt;  y_max                    4.24200 0.050202   1.18 -      \n#&gt;  rate                     0.00936 0.000786   8.40 -      \n#&gt;  beta_age_centered(rate) -0.00238 0.003976 167.23 0.275  \n#&gt;  a.                       0.25627 0.012989   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0703   0.0210  29.8 \n#&gt;  omega2.y_max 0.0618   0.0204  33.0 \n#&gt;  omega2.rate  0.0339   0.0482 142.1 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 150.6239 \n#&gt;        AIC= 166.6239 \n#&gt;        BIC= 180.7135 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 150.7865 \n#&gt;        AIC= 166.7865 \n#&gt;        BIC= 180.8761\n\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter                Estimate   SE      CV(%) p-value\n#&gt;  y_min                    2.726228 0.051339   1.88 -      \n#&gt;  y_max                    4.231942 0.050271   1.19 -      \n#&gt;  beta_age_centered(y_max) 0.000076 0.000578 760.47 0.448  \n#&gt;  rate                     0.009198 0.000774   8.41 -      \n#&gt;  a.                       0.255963 0.012980   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.0709   0.02113  29.8 \n#&gt;  omega2.y_max 0.0035   0.00114  32.7 \n#&gt;  omega2.rate  0.0350   0.04855 138.6 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.2787 \n#&gt;        AIC= 167.2787 \n#&gt;        BIC= 181.3683 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.4833 \n#&gt;        AIC= 167.4833 \n#&gt;        BIC= 181.5729\n\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter                Estimate    SE      CV(%) p-value\n#&gt;  y_min                     2.717381 0.050796   1.87 -      \n#&gt;  beta_age_centered(y_min) -0.000234 0.000898 383.62 0.397  \n#&gt;  y_max                     4.242755 0.050256   1.18 -      \n#&gt;  rate                      0.009375 0.000801   8.55 -      \n#&gt;  a.                        0.256829 0.013033   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.00928  0.00281  30.3 \n#&gt;  omega2.y_max 0.06173  0.02052  33.2 \n#&gt;  omega2.rate  0.04454  0.05019 112.7 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.2472 \n#&gt;        AIC= 167.2472 \n#&gt;        BIC= 181.3368 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.642 \n#&gt;        AIC= 167.642 \n#&gt;        BIC= 181.7316\n\n\n3.3.2 Age\n\nCode# Define models with main effects\nsaemix_data_nlme_age &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = \"age\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; [1] \"age\"\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days) \n#&gt;     covariates: age (-)\n\ncovariate_model_matrix_rate &lt;- matrix(\n  data = c(0, 0, 1),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"age\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_rate &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.0, 0.01), # covariate effect on rate only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_rate &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_rate,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_rate,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; age     0     0    1\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n#&gt; Cov.CondInit   0.0   0.0 0.01\n\nsaemix_fit_nlme_age_rate &lt;- saemix(\n  saemix_model_nlme_rate,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter      Estimate   SE     CV(%) p-value\n#&gt;  y_min           2.73426 0.05123   1.87 -      \n#&gt;  y_max           4.24654 0.05062   1.19 -      \n#&gt;  rate            0.01127 0.00223  19.83 -      \n#&gt;  beta_age(rate) -0.00391 0.00403 103.16 0.166  \n#&gt;  a.              0.25548 0.01297   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0715   0.0212  29.7 \n#&gt;  omega2.y_max 0.0633   0.0208  32.8 \n#&gt;  omega2.rate  0.0403   0.0496 123.3 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 150.7797 \n#&gt;        AIC= 166.7797 \n#&gt;        BIC= 180.8693 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.0107 \n#&gt;        AIC= 167.0107 \n#&gt;        BIC= 181.1003\n\n#----\n\ncovariate_model_matrix_y_max &lt;- matrix(\n  data = c(0, 1, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"age\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_max &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.01, 0.0), # covariate effect on y_max only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_max &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_max,\n  transform.par = c(0, 1, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_max,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     log-normal   Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; age     0     1    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6  4.90 0.05\n#&gt; Cov.CondInit   0.0  0.01 0.00\n\nsaemix_fit_nlme_age_y_max &lt;- saemix(\n  saemix_model_nlme_y_max,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min           2.73e+00 0.051327   1.88 -      \n#&gt;  y_max           4.22e+00 0.119334   2.83 -      \n#&gt;  beta_age(y_max) 7.11e-05 0.000582 818.20 0.451  \n#&gt;  rate            9.17e-03 0.000782   8.53 -      \n#&gt;  a.              2.56e-01 0.012995   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.07065  0.02118  30.0 \n#&gt;  omega2.y_max 0.00356  0.00116  32.6 \n#&gt;  omega2.rate  0.04189  0.05034 120.2 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.6332 \n#&gt;        AIC= 167.6332 \n#&gt;        BIC= 181.7228 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.9172 \n#&gt;        AIC= 167.9172 \n#&gt;        BIC= 182.0068\n\n#----\n\ncovariate_model_matrix_y_min &lt;- matrix(\n  data = c(1, 0, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"age\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_min &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.01, 0.0, 0.0), # covariate effect on y_min only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_min &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_min,\n  transform.par = c(1, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_min,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     log-normal   Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; age     1     0    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit  1.60   4.9 0.05\n#&gt; Cov.CondInit  0.01   0.0 0.00\n\nsaemix_fit_nlme_age_y_min &lt;- saemix(\n  saemix_model_nlme_y_min,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate    SE      CV(%) p-value\n#&gt;  y_min            2.745738 0.119586   4.36 -      \n#&gt;  beta_age(y_min) -0.000231 0.000896 388.46 0.398  \n#&gt;  y_max            4.242183 0.050428   1.19 -      \n#&gt;  rate             0.009373 0.000796   8.50 -      \n#&gt;  a.               0.257262 0.013044   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.00925  0.0028  30.2 \n#&gt;  omega2.y_max 0.06235  0.0206  33.1 \n#&gt;  omega2.rate  0.04047  0.0494 122.1 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.0172 \n#&gt;        AIC= 167.0172 \n#&gt;        BIC= 181.1068 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.3931 \n#&gt;        AIC= 167.3931 \n#&gt;        BIC= 181.4827\n\n\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter      Estimate   SE     CV(%) p-value\n#&gt;  y_min           2.73426 0.05123   1.87 -      \n#&gt;  y_max           4.24654 0.05062   1.19 -      \n#&gt;  rate            0.01127 0.00223  19.83 -      \n#&gt;  beta_age(rate) -0.00391 0.00403 103.16 0.166  \n#&gt;  a.              0.25548 0.01297   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0715   0.0212  29.7 \n#&gt;  omega2.y_max 0.0633   0.0208  32.8 \n#&gt;  omega2.rate  0.0403   0.0496 123.3 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 150.7797 \n#&gt;        AIC= 166.7797 \n#&gt;        BIC= 180.8693 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.0107 \n#&gt;        AIC= 167.0107 \n#&gt;        BIC= 181.1003\n\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min           2.73e+00 0.051327   1.88 -      \n#&gt;  y_max           4.22e+00 0.119334   2.83 -      \n#&gt;  beta_age(y_max) 7.11e-05 0.000582 818.20 0.451  \n#&gt;  rate            9.17e-03 0.000782   8.53 -      \n#&gt;  a.              2.56e-01 0.012995   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.07065  0.02118  30.0 \n#&gt;  omega2.y_max 0.00356  0.00116  32.6 \n#&gt;  omega2.rate  0.04189  0.05034 120.2 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.6332 \n#&gt;        AIC= 167.6332 \n#&gt;        BIC= 181.7228 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.9172 \n#&gt;        AIC= 167.9172 \n#&gt;        BIC= 182.0068\n\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate    SE      CV(%) p-value\n#&gt;  y_min            2.745738 0.119586   4.36 -      \n#&gt;  beta_age(y_min) -0.000231 0.000896 388.46 0.398  \n#&gt;  y_max            4.242183 0.050428   1.19 -      \n#&gt;  rate             0.009373 0.000796   8.50 -      \n#&gt;  a.               0.257262 0.013044   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.00925  0.0028  30.2 \n#&gt;  omega2.y_max 0.06235  0.0206  33.1 \n#&gt;  omega2.rate  0.04047  0.0494 122.1 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.0172 \n#&gt;        AIC= 167.0172 \n#&gt;        BIC= 181.1068 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.3931 \n#&gt;        AIC= 167.3931 \n#&gt;        BIC= 181.4827\n\n\n3.3.3 BMI\n\nCode# Define models with main effects\nsaemix_data_nlme_age &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = \"bmi\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; [1] \"bmi\"\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days) \n#&gt;     covariates: bmi (-)\n\ncovariate_model_matrix_rate &lt;- matrix(\n  data = c(0, 0, 1),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"bmi\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_rate &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.0, 0.01), # covariate effect on rate only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_rate &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_rate,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_rate,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; bmi     0     0    1\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n#&gt; Cov.CondInit   0.0   0.0 0.01\n\nsaemix_fit_nlme_age_rate &lt;- saemix(\n  saemix_model_nlme_rate,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter      Estimate   SE    CV(%) p-value\n#&gt;  y_min           2.7327  0.0509   1.86 -      \n#&gt;  y_max           4.2422  0.0502   1.18 -      \n#&gt;  rate            0.0146  0.0117  79.96 -      \n#&gt;  beta_bmi(rate) -0.0227  0.0406 178.67 0.288  \n#&gt;  a.              0.2568  0.0130   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0694   0.0208  30.0 \n#&gt;  omega2.y_max 0.0616   0.0204  33.1 \n#&gt;  omega2.rate  0.0355   0.0488 137.4 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.0655 \n#&gt;        AIC= 167.0655 \n#&gt;        BIC= 181.1551 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.2937 \n#&gt;        AIC= 167.2937 \n#&gt;        BIC= 181.3833\n\n#----\n\ncovariate_model_matrix_y_max &lt;- matrix(\n  data = c(0, 1, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"bmi\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_max &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.01, 0.0), # covariate effect on y_max only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_max &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_max,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_max,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; bmi     0     1    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6  4.90 0.05\n#&gt; Cov.CondInit   0.0  0.01 0.00\n\nsaemix_fit_nlme_age_y_max &lt;- saemix(\n  saemix_model_nlme_y_max,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min           2.73159  0.050906   1.86 -      \n#&gt;  y_max           3.79836  0.458175  12.06 -      \n#&gt;  beta_bmi(y_max) 0.02277  0.023381 102.66 0.165  \n#&gt;  rate            0.00942  0.000812   8.61 -      \n#&gt;  a.              0.25594  0.013007   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0697   0.0210  30.1 \n#&gt;  omega2.y_max 0.0615   0.0205  33.3 \n#&gt;  omega2.rate  0.0478   0.0514 107.5 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.4091 \n#&gt;        AIC= 167.4091 \n#&gt;        BIC= 181.4987 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.6474 \n#&gt;        AIC= 167.6474 \n#&gt;        BIC= 181.737\n\n#----\n\ncovariate_model_matrix_y_min &lt;- matrix(\n  data = c(1, 0, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"bmi\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_min &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.01, 0.0, 0.0), # covariate effect on y_min only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_min &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_min,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_min,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; bmi     1     0    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit  1.60   4.9 0.05\n#&gt; Cov.CondInit  0.01   0.0 0.00\n\nsaemix_fit_nlme_age_y_min &lt;- saemix(\n  saemix_model_nlme_y_min,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min            2.78592 0.464041  16.66 -      \n#&gt;  beta_bmi(y_min) -0.00288 0.023678 823.47 0.452  \n#&gt;  y_max            4.24304 0.049591   1.17 -      \n#&gt;  rate             0.00939 0.000817   8.70 -      \n#&gt;  a.               0.25662 0.013047   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0697   0.0211  30.2 \n#&gt;  omega2.y_max 0.0588   0.0200  34.0 \n#&gt;  omega2.rate  0.0525   0.0525 100.0 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 152.5203 \n#&gt;        AIC= 168.5203 \n#&gt;        BIC= 182.6099 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 152.7728 \n#&gt;        AIC= 168.7728 \n#&gt;        BIC= 182.8624\n\n\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter      Estimate   SE    CV(%) p-value\n#&gt;  y_min           2.7327  0.0509   1.86 -      \n#&gt;  y_max           4.2422  0.0502   1.18 -      \n#&gt;  rate            0.0146  0.0117  79.96 -      \n#&gt;  beta_bmi(rate) -0.0227  0.0406 178.67 0.288  \n#&gt;  a.              0.2568  0.0130   5.07 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0694   0.0208  30.0 \n#&gt;  omega2.y_max 0.0616   0.0204  33.1 \n#&gt;  omega2.rate  0.0355   0.0488 137.4 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.0655 \n#&gt;        AIC= 167.0655 \n#&gt;        BIC= 181.1551 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.2937 \n#&gt;        AIC= 167.2937 \n#&gt;        BIC= 181.3833\n\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min           2.73159  0.050906   1.86 -      \n#&gt;  y_max           3.79836  0.458175  12.06 -      \n#&gt;  beta_bmi(y_max) 0.02277  0.023381 102.66 0.165  \n#&gt;  rate            0.00942  0.000812   8.61 -      \n#&gt;  a.              0.25594  0.013007   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0697   0.0210  30.1 \n#&gt;  omega2.y_max 0.0615   0.0205  33.3 \n#&gt;  omega2.rate  0.0478   0.0514 107.5 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.4091 \n#&gt;        AIC= 167.4091 \n#&gt;        BIC= 181.4987 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.6474 \n#&gt;        AIC= 167.6474 \n#&gt;        BIC= 181.737\n\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min            2.78592 0.464041  16.66 -      \n#&gt;  beta_bmi(y_min) -0.00288 0.023678 823.47 0.452  \n#&gt;  y_max            4.24304 0.049591   1.17 -      \n#&gt;  rate             0.00939 0.000817   8.70 -      \n#&gt;  a.               0.25662 0.013047   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0697   0.0211  30.2 \n#&gt;  omega2.y_max 0.0588   0.0200  34.0 \n#&gt;  omega2.rate  0.0525   0.0525 100.0 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 152.5203 \n#&gt;        AIC= 168.5203 \n#&gt;        BIC= 182.6099 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 152.7728 \n#&gt;        AIC= 168.7728 \n#&gt;        BIC= 182.8624\n\n\n3.3.4 Sex\n\nCode# Define models with main effects\nsaemix_data_nlme_age &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = \"sex\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; [1] \"sex\"\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days) \n#&gt;     covariates: sex (-) \n#&gt;       reference class for covariate sex :  Female\n\ncovariate_model_matrix_rate &lt;- matrix(\n  data = c(0, 0, 1),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"sex\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_rate &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.0, 0.01), # covariate effect on rate only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_rate &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_rate,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_rate,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; sex     0     0    1\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n#&gt; Cov.CondInit   0.0   0.0 0.01\n\nsaemix_fit_nlme_age_rate &lt;- saemix(\n  saemix_model_nlme_rate,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter      Estimate   SE      CV(%) p-value \n#&gt;  y_min          2.75181  0.050450  1.83  -       \n#&gt;  y_max          4.27740  0.045686  1.07  -       \n#&gt;  rate           0.00822  0.000851 10.35  -       \n#&gt;  beta_sex(rate) 0.51135  0.144280 28.22  0.000197\n#&gt;  a.             0.25893  0.013037  5.03  -       \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0697   0.0206  29.6 \n#&gt;  omega2.y_max 0.0360   0.0156  43.4 \n#&gt;  omega2.rate  0.0354   0.0472 133.2 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 142.1439 \n#&gt;        AIC= 158.1439 \n#&gt;        BIC= 172.2335 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 142.3091 \n#&gt;        AIC= 158.3091 \n#&gt;        BIC= 172.3987\n\n#----\n\ncovariate_model_matrix_y_max &lt;- matrix(\n  data = c(0, 1, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"sex\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_max &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.01, 0.0), # covariate effect on y_max only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_max &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_max,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_max,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; sex     0     1    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6  4.90 0.05\n#&gt; Cov.CondInit   0.0  0.01 0.00\n\nsaemix_fit_nlme_age_y_max &lt;- saemix(\n  saemix_model_nlme_y_max,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE     CV(%) p-value \n#&gt;  y_min            2.73419 0.05047  1.85  -       \n#&gt;  y_max            4.50272 0.05044  1.12  -       \n#&gt;  beta_sex(y_max) -0.48657 0.06384 13.12  1.25e-14\n#&gt;  rate             0.00952 0.00079  8.30  -       \n#&gt;  a.               0.25363 0.01268  5.00  -       \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.0692   0.02051  29.6 \n#&gt;  omega2.y_max 0.0124   0.00994  80.2 \n#&gt;  omega2.rate  0.0367   0.04129 112.4 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 110.892 \n#&gt;        AIC= 126.892 \n#&gt;        BIC= 140.9816 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 111.0156 \n#&gt;        AIC= 127.0156 \n#&gt;        BIC= 141.1052\n\n#----\n\ncovariate_model_matrix_y_min &lt;- matrix(\n  data = c(1, 0, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"sex\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_min &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.01, 0.0, 0.0), # covariate effect on y_min only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_min &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_min,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_min,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;     y_min y_max rate\n#&gt; sex     1     0    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit  1.60   4.9 0.05\n#&gt; Cov.CondInit  0.01   0.0 0.00\n\nsaemix_fit_nlme_age_y_min &lt;- saemix(\n  saemix_model_nlme_y_min,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min           2.70967  0.071226   2.63 -      \n#&gt;  beta_sex(y_min) 0.04365  0.094484 216.47 0.322  \n#&gt;  y_max           4.24258  0.050451   1.19 -      \n#&gt;  rate            0.00939  0.000801   8.53 -      \n#&gt;  a.              0.25646  0.013016   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0695   0.0209  30   \n#&gt;  omega2.y_max 0.0626   0.0206  33   \n#&gt;  omega2.rate  0.0412   0.0499 121   \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.7131 \n#&gt;        AIC= 167.7131 \n#&gt;        BIC= 181.8027 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.9476 \n#&gt;        AIC= 167.9476 \n#&gt;        BIC= 182.0372\n\n\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter      Estimate   SE      CV(%) p-value \n#&gt;  y_min          2.75181  0.050450  1.83  -       \n#&gt;  y_max          4.27740  0.045686  1.07  -       \n#&gt;  rate           0.00822  0.000851 10.35  -       \n#&gt;  beta_sex(rate) 0.51135  0.144280 28.22  0.000197\n#&gt;  a.             0.25893  0.013037  5.03  -       \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0697   0.0206  29.6 \n#&gt;  omega2.y_max 0.0360   0.0156  43.4 \n#&gt;  omega2.rate  0.0354   0.0472 133.2 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 142.1439 \n#&gt;        AIC= 158.1439 \n#&gt;        BIC= 172.2335 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 142.3091 \n#&gt;        AIC= 158.3091 \n#&gt;        BIC= 172.3987\n\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE     CV(%) p-value \n#&gt;  y_min            2.73419 0.05047  1.85  -       \n#&gt;  y_max            4.50272 0.05044  1.12  -       \n#&gt;  beta_sex(y_max) -0.48657 0.06384 13.12  1.25e-14\n#&gt;  rate             0.00952 0.00079  8.30  -       \n#&gt;  a.               0.25363 0.01268  5.00  -       \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE     CV(%)\n#&gt;  omega2.y_min 0.0692   0.02051  29.6 \n#&gt;  omega2.y_max 0.0124   0.00994  80.2 \n#&gt;  omega2.rate  0.0367   0.04129 112.4 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 110.892 \n#&gt;        AIC= 126.892 \n#&gt;        BIC= 140.9816 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 111.0156 \n#&gt;        AIC= 127.0156 \n#&gt;        BIC= 141.1052\n\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter       Estimate   SE      CV(%) p-value\n#&gt;  y_min           2.70967  0.071226   2.63 -      \n#&gt;  beta_sex(y_min) 0.04365  0.094484 216.47 0.322  \n#&gt;  y_max           4.24258  0.050451   1.19 -      \n#&gt;  rate            0.00939  0.000801   8.53 -      \n#&gt;  a.              0.25646  0.013016   5.08 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0695   0.0209  30   \n#&gt;  omega2.y_max 0.0626   0.0206  33   \n#&gt;  omega2.rate  0.0412   0.0499 121   \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.7131 \n#&gt;        AIC= 167.7131 \n#&gt;        BIC= 181.8027 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.9476 \n#&gt;        AIC= 167.9476 \n#&gt;        BIC= 182.0372\n\n\n3.3.5 Country\n\nCode# Define models with main effects\nsaemix_data_nlme_age &lt;- saemixData(\n  name.data = tb_after_7,\n  name.group = \"id\",\n  name.predictors = \"time\",\n  name.response = \"abelisa\",\n  name.covariates = \"country\",\n  units = list(x = \"Days\", y = \"EU/ml\")\n)\n#&gt; Using the object called tb_after_7 in this R session as the data.\n#&gt; [1] \"country\"\n#&gt; \n#&gt; \n#&gt; The following SaemixData object was successfully created:\n#&gt; \n#&gt; Object of class SaemixData\n#&gt;     longitudinal data for use with the SAEM algorithm\n#&gt; Dataset tb_after_7 \n#&gt;     Structured data: abelisa ~ time | id \n#&gt;     Predictor: time (Days) \n#&gt;     covariates: country (-) \n#&gt;       reference class for covariate country :  West Africa\n\ncovariate_model_matrix_rate &lt;- matrix(\n  data = c(0, 0, 1),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"country\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_rate &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.0, 0.01), # covariate effect on rate only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_rate &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_rate,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_rate,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;         y_min y_max rate\n#&gt; country     0     0    1\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6   4.9 0.05\n#&gt; Cov.CondInit   0.0   0.0 0.01\n\nsaemix_fit_nlme_age_rate &lt;- saemix(\n  saemix_model_nlme_rate,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter          Estimate   SE     CV(%) p-value\n#&gt;  y_min               2.7168  0.05020   1.85 -      \n#&gt;  y_max               4.2287  0.05025   1.19 -      \n#&gt;  rate                0.0095  0.00106  11.19 -      \n#&gt;  beta_country(rate) -0.0713  0.08766 122.89 0.208  \n#&gt;  a.                  0.2585  0.01309   5.06 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0629   0.0197  31.4 \n#&gt;  omega2.y_max 0.0626   0.0205  32.7 \n#&gt;  omega2.rate  0.0362   0.0489 134.9 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.3293 \n#&gt;        AIC= 167.3293 \n#&gt;        BIC= 181.4189 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.4219 \n#&gt;        AIC= 167.4219 \n#&gt;        BIC= 181.5115\n\n#----\n\ncovariate_model_matrix_y_max &lt;- matrix(\n  data = c(0, 1, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"country\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_max &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.0, 0.01, 0.0), # covariate effect on y_max only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_max &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_max,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_max,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;         y_min y_max rate\n#&gt; country     0     1    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit   1.6  4.90 0.05\n#&gt; Cov.CondInit   0.0  0.01 0.00\n\nsaemix_fit_nlme_age_y_max &lt;- saemix(\n  saemix_model_nlme_y_max,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter           Estimate   SE      CV(%) p-value\n#&gt;  y_min                2.72642 0.051349   1.88 -      \n#&gt;  y_max                4.29402 0.076175   1.77 -      \n#&gt;  beta_country(y_max) -0.04994 0.053854 107.84 0.177  \n#&gt;  rate                 0.00932 0.000806   8.65 -      \n#&gt;  a.                   0.25560 0.012998   5.09 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0714   0.0214  30.0 \n#&gt;  omega2.y_max 0.0605   0.0202  33.5 \n#&gt;  omega2.rate  0.0517   0.0519 100.2 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.7716 \n#&gt;        AIC= 167.7716 \n#&gt;        BIC= 181.8612 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.9732 \n#&gt;        AIC= 167.9732 \n#&gt;        BIC= 182.0628\n\n#----\n\ncovariate_model_matrix_y_min &lt;- matrix(\n  data = c(1, 0, 0),\n  nrow = 1,\n  ncol = 3,\n  dimnames = list(\"country\", c(\"y_min\", \"y_max\", \"rate\"))\n)\n\npsi0_matrix_y_min &lt;- matrix(\n  c(1.6, 4.9, 0.05,  # fixed effects: y_min, y_max, rate\n    0.01, 0.0, 0.0), # covariate effect on y_min only\n  nrow = 2,\n  byrow = TRUE,\n  dimnames = list(NULL, c(\"y_min\", \"y_max\", \"rate\"))\n)\n\nsaemix_model_nlme_y_min &lt;- saemixModel(\n  model = function_approx,\n  description = \"Antibody decay model with age covariate\",\n  psi0 = psi0_matrix_y_min,\n  transform.par = c(0, 0, 1),           # log-transform rate\n  covariance.model = diag(1, 3),\n  covariate.model = covariate_model_matrix_y_min,\n  error.model = \"constant\"\n)\n#&gt; \n#&gt; \n#&gt; The following SaemixModel object was successfully created:\n#&gt; \n#&gt; Nonlinear mixed-effects model\n#&gt;   Model function:  Antibody decay model with age covariate\n#&gt; function(psi, id, xidep) {\n#&gt;   time &lt;- xidep[, 1]\n#&gt;   y_min &lt;- psi[id, 1]\n#&gt;   y_max &lt;- psi[id, 2]\n#&gt;   rate  &lt;- psi[id, 3]\n#&gt;   fpred &lt;- y_min + (y_max - y_min) * exp(-rate * time)\n#&gt;   return(fpred)\n#&gt; }\n#&gt; &lt;bytecode: 0x11b038130&gt;\n#&gt;   Nb of parameters: 3 \n#&gt;       parameter names:  y_min y_max rate \n#&gt;       distribution:\n#&gt;      Parameter Distribution Estimated\n#&gt; [1,] y_min     normal       Estimated\n#&gt; [2,] y_max     normal       Estimated\n#&gt; [3,] rate      log-normal   Estimated\n#&gt;   Variance-covariance matrix:\n#&gt;       y_min y_max rate\n#&gt; y_min     1     0    0\n#&gt; y_max     0     1    0\n#&gt; rate      0     0    1\n#&gt;   Error model: constant , initial values: a.=1 \n#&gt;   Covariate model:\n#&gt;         y_min y_max rate\n#&gt; country     1     0    0\n#&gt;     Initial values\n#&gt;              y_min y_max rate\n#&gt; Pop.CondInit  1.60   4.9 0.05\n#&gt; Cov.CondInit  0.01   0.0 0.00\n\nsaemix_fit_nlme_age_y_min &lt;- saemix(\n  saemix_model_nlme_y_min,\n  saemix_data_nlme_age,\n  saemix_options_nlme\n)\n#&gt; Plotting the data\n#&gt; Plotting convergence plots\n#&gt; Plotting the likelihood\n#&gt; Plotting observations versus predictions\n#&gt; Plotting individual fits\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter           Estimate   SE      CV(%) p-value \n#&gt;  y_min               2.42427  0.054376  2.24  -       \n#&gt;  beta_country(y_min) 0.29507  0.036495 12.37  3.33e-16\n#&gt;  y_max               4.25161  0.049480  1.16  -       \n#&gt;  rate                0.00961  0.000873  9.09  -       \n#&gt;  a.                  0.25376  0.012781  5.04  -       \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0142   0.0094 66.1  \n#&gt;  omega2.y_max 0.0586   0.0201 34.4  \n#&gt;  omega2.rate  0.0852   0.0517 60.7  \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 112.6378 \n#&gt;        AIC= 128.6378 \n#&gt;        BIC= 142.7274 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 112.9279 \n#&gt;        AIC= 128.9279 \n#&gt;        BIC= 143.0175\n\n\n\nsaemix_fit_nlme_age_rate@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter          Estimate   SE     CV(%) p-value\n#&gt;  y_min               2.7168  0.05020   1.85 -      \n#&gt;  y_max               4.2287  0.05025   1.19 -      \n#&gt;  rate                0.0095  0.00106  11.19 -      \n#&gt;  beta_country(rate) -0.0713  0.08766 122.89 0.208  \n#&gt;  a.                  0.2585  0.01309   5.06 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0629   0.0197  31.4 \n#&gt;  omega2.y_max 0.0626   0.0205  32.7 \n#&gt;  omega2.rate  0.0362   0.0489 134.9 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.3293 \n#&gt;        AIC= 167.3293 \n#&gt;        BIC= 181.4189 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.4219 \n#&gt;        AIC= 167.4219 \n#&gt;        BIC= 181.5115\n\n\nsaemix_fit_nlme_age_y_max@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter           Estimate   SE      CV(%) p-value\n#&gt;  y_min                2.72642 0.051349   1.88 -      \n#&gt;  y_max                4.29402 0.076175   1.77 -      \n#&gt;  beta_country(y_max) -0.04994 0.053854 107.84 0.177  \n#&gt;  rate                 0.00932 0.000806   8.65 -      \n#&gt;  a.                   0.25560 0.012998   5.09 -      \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0714   0.0214  30.0 \n#&gt;  omega2.y_max 0.0605   0.0202  33.5 \n#&gt;  omega2.rate  0.0517   0.0519 100.2 \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 151.7716 \n#&gt;        AIC= 167.7716 \n#&gt;        BIC= 181.8612 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 151.9732 \n#&gt;        AIC= 167.9732 \n#&gt;        BIC= 182.0628\n\n\nsaemix_fit_nlme_age_y_min@results\n#&gt; Fixed effects\n#&gt; Warning in methods::show(x): NAs introduced by coercion\n#&gt;  Parameter           Estimate   SE      CV(%) p-value \n#&gt;  y_min               2.42427  0.054376  2.24  -       \n#&gt;  beta_country(y_min) 0.29507  0.036495 12.37  3.33e-16\n#&gt;  y_max               4.25161  0.049480  1.16  -       \n#&gt;  rate                0.00961  0.000873  9.09  -       \n#&gt;  a.                  0.25376  0.012781  5.04  -       \n#&gt; \n#&gt; Variance of random effects\n#&gt;  Parameter    Estimate   SE    CV(%)\n#&gt;  omega2.y_min 0.0142   0.0094 66.1  \n#&gt;  omega2.y_max 0.0586   0.0201 34.4  \n#&gt;  omega2.rate  0.0852   0.0517 60.7  \n#&gt; \n#&gt; Statistical criteria\n#&gt; Likelihood computed by linearisation\n#&gt;       -2LL= 112.6378 \n#&gt;        AIC= 128.6378 \n#&gt;        BIC= 142.7274 \n#&gt; Likelihood computed by importance sampling\n#&gt;       -2LL= 112.9279 \n#&gt;        AIC= 128.9279 \n#&gt;        BIC= 143.0175",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Non-linear mixed effects (NLME) model - covariates</span>"
    ]
  }
]